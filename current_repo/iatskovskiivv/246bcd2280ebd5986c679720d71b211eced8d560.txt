==== File: accesslist/views.py ====
@@ -816,7 +816,9 @@ def check_taskid_and_status(request, *args, **kwargs):
                                 send_to_mattermost(f"[acl_pusher] [Перехвачен Дубль обращения] ACL уже назначен Номер SD:{aclObject.taskid}; Ссылка на ACL :https://acl.vesta.ru/acl/info/{str(aclObject.id)}")
                                 continue
                             try:
-                                doc_result = make_doc(request, json.loads(aclObject.acltext), acl_id)
+                                gitlab_repo_url = request.session['GIT_URL']
+                                gitlab_filename = request.session['GIT_FILENAME']
+                                doc_result = make_doc(request, json.loads(aclObject.acltext), acl_id, gitlab_repo_url=gitlab_repo_url, gitlab_filename=gitlab_filename)
                             except Exception as e:
                                 logger.error(f'Ошибка при создании docx: {e}')
 
@@ -938,7 +940,9 @@ def task(request, acl_id)->bool:
     if 'ACT_MAKE_DOCX' in request.session:
         UpdateCallBackStatus(request, acl_id, 'docx_download_status', 'Генерация docx файла')
     try:
-        doc_result = make_doc(request, request.session['LOCAL_STORAGE'], acl_id)
+        gitlab_repo_url = request.session['GIT_URL']
+        gitlab_filename = request.session['GIT_FILENAME']
+        doc_result = make_doc(request, request.session['LOCAL_STORAGE'], gitlab_repo_url=gitlab_repo_url, gitlab_filename=gitlab_filename)
         doc_ready= True
     except Exception as e:
         UpdateCallBackStatus(request, acl_id, 'docx_download_status',
@@ -972,7 +976,9 @@ def task(request, acl_id)->bool:
                 try:
                     UpdateCallBackStatus(request, acl_id, 'omni_email_status', 'Генерация docx файла...')
                     logger.info(f"При создании файла: {request.session['LOCAL_STORAGE']}")
-                    doc_result = make_doc(request, request.session['LOCAL_STORAGE'], acl_id)
+                    gitlab_repo_url = request.session['GIT_URL']
+                    gitlab_filename = request.session['GIT_FILENAME']
+                    doc_result = make_doc(request, request.session['LOCAL_STORAGE'], acl_id, gitlab_repo_url=gitlab_repo_url, gitlab_filename=gitlab_filename)
                     doc_ready = True
                 except Exception as e:
                     logger.error(e)


==== File: ownerlist/utils.py ====
@@ -18,6 +18,7 @@ import xlrd
 import tempfile
 from django.shortcuts import reverse, redirect
 from docx import Document, opc
+from docx.enum.text import WD_COLOR_INDEX
 from docx.shared import RGBColor
 from docx.shared import Pt
 import socket
@@ -898,9 +899,36 @@ def UpdateCallBackStatus (request, taskid, name, value, event = 1):
     cache.set(taskid, JOB)
 
 
-def make_doc(request=None, data_set={}, fileuuid='')->str:
+def make_doc(request=None, data_set={}, fileuuid='', gitlab_repo_url='', gitlab_filename='')->str:
     """Функция для генерации docx файла"""
-    import urllib
+    def normalize_whitespace(data_set):
+        for data_idx, data in enumerate(data_set):
+            try:
+                if data_idx == 0:
+                    continue
+                for row_idx, row_value in enumerate(data_set[data]):
+                    for cell_idx, cell_value in enumerate(row_value):
+                        if (all(ch.isspace() for ch in cell_value)):
+                            data_set[data][row_idx][cell_idx] = ' '
+                        else:
+                            try:
+                                data_set[data][row_idx][cell_idx] = cell_value.strip()
+                            except Exception as e:
+                                logger.error(e)
+            except Exception as e:
+                logger.error('Ошибка при нормализации пробелов docx')
+                continue
+        return data_set
+
+    if gitlab_repo_url != '' and gitlab_filename != '':
+        md_content = get_acl_from_gitlab(repo_url=gitlab_repo_url, file_name=gitlab_filename)
+
+        gitlab_data_set = convert_md_to_dict(md_content)['LOCAL_STORAGE']
+        data_set = normalize_whitespace(data_set)
+        gitlab_data_set = normalize_whitespace(gitlab_data_set)
+    else:
+        gitlab_data_set = data_set
+
     is_in_session = 'ACT_MAKE_DOCX' in request.session
     TEMPLATE_FILE = os.path.join(BASE_DIR, 'templates//ACL.docx')
     try:
@@ -920,7 +948,14 @@ def make_doc(request=None, data_set={}, fileuuid='')->str:
 
     if is_in_session:
         UpdateCallBackStatus(request, fileuuid, 'docx_download_status', 'Создаем docx файл')
-    APP_FILE = 'static/docx/ACL_' + fileuuid + '.docx'
+
+    try:
+        gitlab_filename = gitlab_filename.split('.')[:-1][0]
+        APP_FILE = 'static/docx/ACL_' + fileuuid + "_" + gitlab_filename + '.docx'
+    except Exception as e:
+        APP_FILE = 'static/docx/ACL_' + fileuuid + '.docx'
+        logger.error(e)
+
     doc = Document(TEMPLATE_FILE)
     if is_in_session:
         UpdateCallBackStatus(request, fileuuid, 'docx_download_status', 'Записываем изменения')
@@ -934,28 +969,94 @@ def make_doc(request=None, data_set={}, fileuuid='')->str:
         table_cols = len(table_tmp.columns)
         if data_inx == 0:  # Для таблицы контакты, меняем правила игры
             for row_idx, row_data in enumerate(data_set[data]):
-                if row_idx >= table_rows:
-                    table_tmp.add_row()
-                table_tmp.cell(row_idx, 1).text = row_data
+                try:
+                    if row_idx >= table_rows:
+                        table_tmp.add_row()
+                    table_tmp.cell(row_idx, 1).text = row_data
+                    if str(row_data) not in gitlab_data_set.get(data, []):
+                        for paragraph in table_tmp.cell(row_idx, 1).paragraphs:
+                            for run in paragraph.runs:
+                                run.font.highlight_color = WD_COLOR_INDEX.YELLOW
+                        try:
+                            strike_paragraph = table_tmp.cell(row_idx, 1).add_paragraph()
+                            run_strike = strike_paragraph.add_run(str(gitlab_data_set.get(data, [])[row_idx]))
+                            run_strike.font.strike = True
+                            run_strike.font.highlight_color = WD_COLOR_INDEX.RED
+                        except:
+                            logger.warning("Удалённой строки страницы Контакты не найдено")
+                except Exception as e:
+                    logger.error(e)
         else:
             row_cnt = 0
             if data not in data_set:
+                if data in gitlab_data_set:
+                    for key, value in enumerate(gitlab_data_set[data], start=1):
+                        try:
+                            if row_cnt >= table_rows:
+                                table_tmp.add_row()
+                            if len(value) <= table_cols:
+                                for cell_idx, cell_val in enumerate(value):
+                                    cell = table_tmp.cell(key, cell_idx)
+                                    cell.text = str(cell_val)
+                                    cell.paragraphs[0].runs[0].font.strike = True
+                                    cell.paragraphs[0].runs[0].font.highlight_color = WD_COLOR_INDEX.RED
+                        except Exception as e:
+                            logger.error(f'[restore from gitlab data set error ] {e}')
                 continue
             for key, value in enumerate(data_set[data], start=1):
-                if row_cnt >= table_rows:
-                    table_tmp.add_row()
-                if len(value) <= table_cols:
-                    for cell_idx, cell_val in enumerate(value):
-                        cell = table_tmp.cell(key, cell_idx)
-                        cell.text = str(cell_val)
-                        cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(255, 0, 0)  # Yellow color
-                #               table_tmp.cell(key, cell_idx).text = str(cell_val)
-
+                try:
+                    if row_cnt >= table_rows:
+                        table_tmp.add_row()
+                    if len(value) <= table_cols:
+                        for cell_idx, cell_val in enumerate(value):
+                            try:
+                                cell = table_tmp.cell(key, cell_idx)
+                                cell.text = str(cell_val)
+                                cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(255, 0, 0)  # Yellow color
+                        #               table_tmp.cell(key, cell_idx).text = str(cell_val)
+                            except Exception as e:
+                                logger.error(e)
+                        if data not in gitlab_data_set:
+                            for cell_idx, cell_val in enumerate(value):
+                                try:
+                                    cell = table_tmp.cell(key, cell_idx)
+                                    cell.paragraphs[0].runs[0].font.highlight_color = WD_COLOR_INDEX.YELLOW
+                                except Exception as e:
+                                    logger.error(e)
+                        else:
+                            if value not in gitlab_data_set[data]:
+                                for cell_idx, cell_val in enumerate(value):
+                                    try:
+                                        cell = table_tmp.cell(key, cell_idx)
+                                        cell.paragraphs[0].runs[0].font.highlight_color = WD_COLOR_INDEX.YELLOW
+                                    except Exception as e:
+                                        logger.error(e)
+                    row_cnt += 1
+                except Exception as e:
+                    logger.error(e)
+
+        if data not in gitlab_data_set:
+            continue
+        if data in gitlab_data_set.keys():
+            row_cnt = 0
+            for row_idx, row_val in enumerate(gitlab_data_set[data], start=1):
+                try:
+                    if row_cnt >= table_rows:
+                        table_tmp.add_row()
+                    if row_val not in data_set[data]:
+                        if len(row_val) <= table_cols:
+                            for cell_idx, cell_val in enumerate(row_val):
+                                cell = table_tmp.cell(row_idx, cell_idx)
+                                new_paragraph = cell.add_paragraph()
+                                run = new_paragraph.add_run(str(cell_val))
+                                run.font.highlight_color = WD_COLOR_INDEX.RED
+                                run.font.strike = True
+                    row_cnt += 1
                 # else:
                 #     for cell_idx, cell_val in range(table_cols): #[domain, 23, sdf, domain, 23]
                 #         table_tmp.cell(key, cell_idx).text = str(cell_val)
-
-                row_cnt += 1
+                except Exception as e:
+                    logger.error(e)
 
     if 'taskid' in request.session:
         if (request.session['taskid'] != ''):
@@ -1508,6 +1609,9 @@ def ParseDocx(file):
             if idx == 0:
                 if table_rows > 7:
                     for id, row in enumerate(table.rows):
+                        if table_rows >= 9 and id == 9:
+                            logger.info(f"Проверка из файла {row.cells[1].text}")
+                            continue
                         buffer.append(row.cells[1].text)
                 else:
                     for id, row in enumerate(table.rows):
@@ -1952,13 +2056,6 @@ def acl_sending_retry_checking(aclObject):
         result = None
     return result
 
-
-
-
-
-
-
-
 def check_taskId_by_uuid(uuid, proxy=None):
     '''Функция проверяет номер SD по номеру UUID в omnitracker'''
 


