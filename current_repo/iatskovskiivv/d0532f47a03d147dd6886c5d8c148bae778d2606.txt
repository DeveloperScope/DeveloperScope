==== File: accesslist/views.py ====
@@ -791,7 +791,7 @@ def upload_acl_from_git(request):
                 logger.info(f'Пользователь {current_username} есть в списке участников: {project_members_list}. Начинаю загрузку md на портал')
                 g = GitWorker(request, gitlab_repo_url, PATH_OF_GIT_REPO=None, MDFILE='', taskid='')
                 if g:
-                    g.repo.git.ls_remote('--heads', '--tags', gitlab_repo_url)
+                    g.repo.git.ls_remote('--heads', '--tags', g.GITPRO)
                     g.free()
             else:
                 logger.info(f'Пользователь {current_username} не найден среди участников проекта: {project_members_list}. Отображено сообщение: нет доступа')


==== File: ownerlist/utils.py ====
@@ -1312,7 +1312,7 @@ class GitWorker:
 
         self.GITURL = GITPRO
         self.GITPRO = GITPRO.split('://')[1]
-        self.GITPRO = f"https://:{self.gitlab_token}@{self.GITPRO}"
+        self.GITPRO = f"https://{self.USERNAME}:{self.gitlab_token}@{self.GITPRO}"
 
         if PATH_OF_GIT_REPO is not None:
             self.PATH_OF_GIT_REPO = PATH_OF_GIT_REPO
@@ -1987,12 +1987,15 @@ def send_to_mattermost(*messages):
 
 def get_gitlab_project_info(session, repo_url: str, mode: str = ''):
     try:
+        logger.info(f'[GET_GITLAB_PROJECT_INFO] Получение информации о проекте.')
         # base_api_url = f"https://{request.session['GIT_USERNAME']}%40alfastrah.ru:{request.session['GIT_PASSWORD']}@gitlab.alfastrah.ru/api/v4/projects"
         base_api_url = f"https://gitlab.alfastrah.ru/api/v4/projects"
         project_namespace = "/".join(repo_url.split('/')[3:-1]).replace('/', '%2F')
+        logger.info(f'[GET_GITLAB_PROJECT_INFO] Получен project namespace:{project_namespace}')
         repo_url_parts = repo_url.split('/')
         project_name_with_extension = repo_url_parts[-1]
         project_name = os.path.splitext(project_name_with_extension)[0]
+        logger.info(f'[GET_GITLAB_PROJECT_INFO] Получен project_name:{project_name}')
         project_id = None
         get_project_id_api = f"{base_api_url}/{project_namespace}%2F{project_name}"
         response = session.get(get_project_id_api)
@@ -2000,6 +2003,7 @@ def get_gitlab_project_info(session, repo_url: str, mode: str = ''):
             project_id = int(response.json()['id']) or None
 
         if project_id is not None:
+            logger.info(f'[GET_GITLAB_PROJECT_INFO] Получен project_id:{project_id}')
             if mode == 'id':
                 return project_id
             info = {'namespace':project_namespace, 'project_name':project_name, 'project_id':project_id}
@@ -2018,6 +2022,7 @@ def get_files_from_gitlab(repo_url: str, branch_name: str = 'develop'):
         response = session.get(get_file_list_api)
         if response.status_code == 200:
             file_list = [file_name['name'] for file_name in response.json() if ".md" in file_name['name']]
+            logger.info(f'[GET_FILES_FROM_GITLAB] Список файлов успешно получен')
     except Exception as e:
         logger.error(f"Ошибка при получении списка файлов:{e}")
     finally:
@@ -2026,16 +2031,19 @@ def get_files_from_gitlab(repo_url: str, branch_name: str = 'develop'):
 def get_acl_from_gitlab(repo_url: str, branch_name: str = 'develop', file_name:str = ''):
     """Получает acl в формате str из gitlab"""
     try:
+        logger.info(f'[GET_ACL_FROM_GITLAB] Получаю acl в формате str из gitlab')
         session = requests.Session()
         session.headers.update({'PRIVATE-TOKEN': settings.GIT_ACCESS_TOKEN})
         project_id = get_gitlab_project_info(session, repo_url)['project_id']
-        get_file_content_api = f"https://alfastrah.ru:@gitlab.alfastrah.ru/api/v4/projects/{project_id}/repository/files/{file_name}?ref={branch_name}"
+        get_file_content_api = f"https://gitlab.alfastrah.ru/api/v4/projects/{project_id}/repository/files/{file_name}?ref={branch_name}"
         response = session.get(get_file_content_api)
         if response.status_code == 200:
+            logger.info(f'[GET_ACL_FROM_GITLAB] acl получен из gitlab. Обработка к необходимому формату.')
             encoded_file_content = response.json()['content']
             decoded_file_content = base64.b64decode(encoded_file_content).decode('utf-8')
             project_desc = get_project_desc_from_git(session=session, project_id=str(project_id))
             return decoded_file_content, project_desc
+        logger.info(f'[GET_ACL_FROM_GITLAB] Не удалось получить acl из gitlab')
         return
     except Exception as e:
         logger.error(f'[ПОЛУЧЕНИЕ md_content] Ошибка: {e}')


