==== File: accesslist/views.py ====
@@ -470,6 +470,9 @@ def ACldefault(request):
 
 def save__form(request, owner_form: None, acl_id)->None:
     """Сохранение данныех из сесии в БД"""
+    if owner_form is None:
+        logger.error("[save__form] owner_form is None")
+        return
     if owner_form[1] != request.user.email:
         email = request.user.email
     else:
@@ -971,7 +974,8 @@ def UploadTemplate(request):
         result = upload_file_handler(request, ParseDocx)
     except Exception as e:
         if request.is_ajax:
-            result = {'error': str(e)}
+            logger.error(f'Ошибка загрузки из файла. Формат не определён. Ошибка: {str(e)}')
+            result = {'error': "Ошибка загрузки из файла. Формат не определён."}
         else:
             messages.error(request, str(e))
         logger.error("{} {}".format(stack()[0][3], str(e)))


==== File: ownerlist/utils.py ====
@@ -1644,11 +1644,39 @@ def MakeTemporaryToken():
     s = "{} ACL token {}".format(random.randrange(999), datetime.datetime.now())
     return "{}".format(hashlib.md5(s.encode()).hexdigest()[:10])
 
+
+def compare_first_column(doc1, doc2):
+    table1 = doc1.tables[0]
+    table2 = doc2.tables[0]
+    column1 = [cell.text for cell in table1.columns[0].cells]
+    column2 = [cell.text for cell in table2.columns[0].cells]
+    if column1 == column2:
+        return True
+    return False
+
+def compare_table_headers(doc1, doc2):
+    for table1, table2 in zip(doc1.tables[1:], doc2.tables[1:]):
+        headers1 = [cell.text for cell in table1.rows[0].cells]
+        headers2 = [cell.text for cell in table2.rows[0].cells]
+        if headers1 != headers2:
+            return False
+    return True
+
+def check_file_against_template(file_path, template_path):
+    doc1 = Document(file_path)
+    doc2 = Document(template_path)
+    return compare_first_column(doc1, doc2) and compare_table_headers(doc1, doc2)
+
 def ParseDocx(file):
+    template_file = os.path.join(BASE_DIR, 'templates//ACL.docx')
     LOCAL_STORAGE = {}
     FIX_STATISTICS = 0
     SKIP__STATISTICS = 0
     result = {}
+    if not check_file_against_template(file, template_file):
+        logger.error(f'Был загружен файл, несоответствующий шаблону.{file}')
+        result['error'] = 'Неправильный формат файла. Проверьте заголовки в вашем файле.'
+        return result
     try:
         doc = Document(file)
         tables = doc.tables
@@ -1724,7 +1752,7 @@ def ParseDocx(file):
        result['error'] = 'Ошибка, вероятно это не docx файл'
     except Exception as e:
        result['error'] = str(e)
-       logger.info(f'Ошибка загрузки из файла:{e}')
+       logger.error(f'Ошибка загрузки из файла:{e}')
     finally:
         if len(LOCAL_STORAGE) > 0:
                 result['LOCAL_STORAGE'] = LOCAL_STORAGE


