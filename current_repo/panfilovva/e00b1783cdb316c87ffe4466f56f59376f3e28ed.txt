==== File: .gitlab-ci.yml ====
@@ -45,6 +45,8 @@ lint_code:
     - sudo python -m pip config set global.trusted-host nx.alfastrah.ru
     - sudo python -m pip install --upgrade -r requirements.txt
     - sudo service apache2 restart
+    - sudo service celery restart
+    - sudo service celerybeat restart
   allow_failure: true
   artifacts:
     reports:


==== File: accesslist/signals.py ====
@@ -1,12 +1,15 @@
 from django.db.models.signals import post_save
 from django.dispatch import receiver
 
-from .models import ACL, ACLGitlabStore
 from acladmin.tasks import send_acl
 
+from .models import ACL, ACLGitlabStore
+
 
 @receiver(post_save, sender=ACL)
 def run_send_acl_task(sender, instance, **kwargs):
     if instance.status == "APRV":
-        gitlab_repo_url = ACLGitlabStore.objects.get(project=instance.project).gitlab_url
+        gitlab_repo_url = ACLGitlabStore.objects.get(
+            project=instance.project
+        ).gitlab_url
         send_acl.delay(acl_id=instance.id, gitlab_repo_url=gitlab_repo_url)


==== File: accesslist/templates/acl_traffic.html ====
@@ -2,6 +2,7 @@
 {% load static %}
 {% load random_numbers %}
 {% load get_index %}
+{% load empty_strings %}
 {% block row %}
 <div class="col-11 pt-3">
         <div class="main-block">
@@ -90,7 +91,12 @@
                 <tbody>
                  {% if LOCAL_STORAGE|length > 0 %}
                     {% for item in LOCAL_STORAGE %}
-                     <tr>
+                    <tr {% if item|count_empty_strings > 1 %}style="background-color: yellow;"{% endif %}>
+                      {% if item|count_empty_strings > 1 %}
+                      <script>
+                          ShowNotify(1, "Обратите внимание найдены невалидные строки.");
+                      </script>
+                      {% endif %}
                                 {% for widget in widgets %}
                                     <td>
                                         {% if "input_is_reserve" in widget %}
@@ -329,3 +335,4 @@
       });
     </script>
 {% endblock %}
+


==== File: accesslist/templatetags/empty_strings.py ====
@@ -0,0 +1,8 @@
+from django import template
+
+register = template.Library()
+
+
+@register.filter
+def count_empty_strings(lst):
+    return lst.count(" ")


==== File: accesslist/views.py ====
@@ -46,11 +46,9 @@ from ownerlist.utils import (
     BaseView,
     ClearSessionMeta,
     GitWorker,
-    create_markdown_file,
     MakeTemporaryToken,
     ParseDocx,
     SendMessageToApprove,
-    update_callback_status,
     acl_sending_retry_checking,
     convert_md_to_dict,
     get_acl_from_gitlab,
@@ -66,7 +64,8 @@ from ownerlist.utils import (
     send_onmitracker,
     send_to_mattermost,
     sync_acl_portal_projects_list,
-    upload_file_handler,
+    update_callback_status,
+    upload_file_handler, create_markdown_file,
 )
 from teams.models import Block, Team
 
@@ -140,7 +139,7 @@ class ObjectMixin:
                         response = HttpResponseRedirect(
                             reverse("acl_pending_urls", kwargs=({"acl_id": acl_id}))
                         )
-                        response["Location"] += "?token={}".format(tmp.token)
+                        response["Location"] += f"?token={tmp.token}"
                         return response
 
                     if tmp.approve == request.user:
@@ -273,18 +272,14 @@ class ObjectMixin:
                         request,
                         "Для продолжения, необходимо заполнить контактные данные.",
                     )
-                    return redirect("{}{}/".format(reverse(FORM_URLS[1]), acl_id))
+                    return redirect(f"{reverse(FORM_URLS[1])}{acl_id}/")
                 obj = save__form(request, owner_form, acl_id)
                 if obj is not None:
                     return obj
                 if NO_MAKE_JOB == "no":
                     messages.info(request, "Данные сохранены")
-                    return redirect(
-                        "{}{}/".format(reverse(FORM_URLS[current_page]), acl_id)
-                    )
-                return redirect(
-                    "{}{}/".format(reverse(FORM_URLS[current_page + 1]), acl_id)
-                )
+                    return redirect(f"{reverse(FORM_URLS[current_page])}{acl_id}/")
+                return redirect(f"{reverse(FORM_URLS[current_page + 1])}{acl_id}/")
 
         messages.warning(request, "Не все поля заполнены")
         return render(request, self.template, context={"acl_id": acl_id})
@@ -325,15 +320,13 @@ class Aclhistory(BaseView, LoginRequiredMixin, View):
 
         is_paginated = page.has_other_pages()
 
+        prev_url = ""
         if page.has_previous():
-            prev_url = "?page={}".format(page.previous_page_number())
-        else:
-            prev_url = ""
+            prev_url = f"?page={page.previous_page_number()}"
 
+        next_url = ""
         if page.has_next():
-            next_url = "?page={}".format(page.next_page_number())
-        else:
-            next_url = ""
+            next_url = f"?page={page.next_page_number()}"
 
         context = {
             "acl": ACL,
@@ -495,7 +488,7 @@ class Acl_approve(BaseView, LoginRequiredMixin, View):
                             acl_id, tmp.owner, user_obj, token=tmp.token
                         )
                     except Exception as e:
-                        logger.error("Ошибка при отправке email: {}".format(e))
+                        logger.error(f"Ошибка при отправке email: {e}")
 
             tmp.status = "WTE"
             tmp.approve.set(user_list)
@@ -507,9 +500,7 @@ class Acl_approve(BaseView, LoginRequiredMixin, View):
             if len(form.errors.keys()) > 0:
                 messages.error(
                     request,
-                    "Произошла ошибка при изменении данных, вероятно невалидные данные в форме: {}".format(
-                        form.errors.keys()
-                    ),
+                    f"Произошла ошибка при изменении данных, вероятно невалидные данные в форме: {form.errors.keys()}",
                 )
             else:
                 messages.error(request, "Ошибка на стороне сервера")
@@ -746,9 +737,7 @@ def save__form(request, owner_form: None, acl_id) -> None:
             obj.save()
 
     except Exception as e:
-        messages.error(
-            request, "Ошибка, мы не смогли записать данные в БД. {}".format(e)
-        )
+        messages.error(request, f"Ошибка, мы не смогли записать данные в БД. {e}")
         logger.error(
             "{}|{}|{}".format(stack()[0][3], str(e), request.META.get("REMOTE_ADDR"))
         )
@@ -760,7 +749,7 @@ def save__form(request, owner_form: None, acl_id) -> None:
             logger.error(
                 "{}|{}|{}".format(
                     stack()[0][3],
-                    str("Данные в БД не сохранены"),
+                    "Данные в БД не сохранены",
                     request.META.get("REMOTE_ADDR"),
                 )
             )
@@ -1079,7 +1068,7 @@ def upload_acl_from_git(request):
 def send_acl_to_git(request, acl_object):
     try:
         file_md = (
-                create_markdown_file(
+            create_markdown_file(
                 request,
                 json_data=json.loads(acl_object.acltext),
                 filename=f"acl_{acl_object.id}",
@@ -1183,44 +1172,57 @@ def check_taskid_and_status(request, *args, **kwargs):
                                 data_set=local_storage,
                                 fileuuid=acl_object.id,
                                 gitlab_repo_url=gitlab_repo_url,
-                                gitlab_filename=acl_object.git_filename
+                                gitlab_filename=acl_object.git_filename,
                             )
                             if settings.OMNITRACKER_URL:
                                 try:
                                     docx_url = f"{request.get_host()}/{doc_result[1:]}"
-                                    logger.debug('URL ОТПРАВКИ В OMNI ' + str(docx_url))
+                                    logger.debug("URL ОТПРАВКИ В OMNI " + str(docx_url))
 
-                                    if '://' not in docx_url:
-                                        docx_url = 'https://' + docx_url
+                                    if "://" not in docx_url:
+                                        docx_url = "https://" + docx_url
 
                                 except Exception as e:
-                                    docx_url = ''
-                                    logger.error(f'Ошибка при создании ссылки на docx: {e}')
-                                result_id = send_onmitracker(sender=acl_object.owner.email,
-                                                             title=f'SH0458 Запрос на предоставление доступа согласован : {str(acl_object.approve.first().get_full_name())}',
-                                                             text=f'Прошу предоставить сетевой доступ, согласно ACL. Согласование владельца ресурса во вложении. Ссылка на ACL :https://acl.vesta.ru/acl/info/{str(acl_object.id)}',
-                                                             attach=docx_url,
-                                                             fake=False,
-                                                             request=request,
-                                                             uid=acl_object.id
-                                                             )
+                                    docx_url = ""
+                                    logger.error(
+                                        f"Ошибка при создании ссылки на docx: {e}"
+                                    )
+                                result_id = send_onmitracker(
+                                    sender=acl_object.owner.email,
+                                    title=f"SH0458 Запрос на предоставление доступа согласован : {str(acl_object.approve.first().get_full_name())}",
+                                    text=f"Прошу предоставить сетевой доступ, согласно ACL. Согласование владельца ресурса во вложении. Ссылка на ACL :https://acl.vesta.ru/acl/info/{str(acl_object.id)}",
+                                    attach=docx_url,
+                                    fake=False,
+                                    request=request,
+                                    uid=acl_object.id,
+                                )
                                 result_id = int(result_id) or 0
                                 if result_id == 0:
                                     send_to_mattermost(
-                                        f"[acl_pusher] Мы не смогли создать обращение через OmniTracker")
-                                    raise Exception('[acl_pusher] Мы не смогли создать обращение через OmniTracker')
+                                        "[acl_pusher] Мы не смогли создать обращение через OmniTracker"
+                                    )
+                                    raise Exception(
+                                        "[acl_pusher] Мы не смогли создать обращение через OmniTracker"
+                                    )
                                 else:
                                     if acl_object:
                                         acl_object.taskid = str(result_id)
-                                        acl_object.save(update_fields=['taskid'])
+                                        acl_object.save(update_fields=["taskid"])
                                         success_send_omni_count += 1
                                         send_to_mattermost(
-                                            f'[acl_pusher][owner={acl_object.owner}, Ссылка на ACL: https://acl.vesta.ru/acl/info/{str(acl_object.id)}] Получен номер SD("{result_id}"). Добавление и проверка записи на портале={acl_object.taskid}')
-                            if 'ACT_MAKE_GIT' in request.session: del request.session['ACT_MAKE_GIT']
-                            if 'ACT_OMNI' in request.session: del request.session['ACT_OMNI']
+                                            f'[acl_pusher][owner={acl_object.owner}, Ссылка на ACL: https://acl.vesta.ru/acl/info/{str(acl_object.id)}] Получен номер SD("{result_id}"). Добавление и проверка записи на портале={acl_object.taskid}'
+                                        )
+                            if "ACT_MAKE_GIT" in request.session:
+                                del request.session["ACT_MAKE_GIT"]
+                            if "ACT_OMNI" in request.session:
+                                del request.session["ACT_OMNI"]
                         except Exception as e:
-                            send_to_mattermost(f"[acl_pusher] Произошла ошибка при формировании заявки: {e}")
-                            logger.error(f'[acl_pusher] Произошла ошибка при формировании заявки: {e}')
+                            send_to_mattermost(
+                                f"[acl_pusher] Произошла ошибка при формировании заявки: {e}"
+                            )
+                            logger.error(
+                                f"[acl_pusher] Произошла ошибка при формировании заявки: {e}"
+                            )
                             unsuccessful_count += 1
 
                         try:
@@ -1307,7 +1309,7 @@ def UploadTemplate(request):
             result = {"error": "Ошибка загрузки из файла. Формат не определён."}
         else:
             messages.error(request, str(e))
-        logger.error("{} {}".format(stack()[0][3], str(e)))
+        logger.error(f"{stack()[0][3]} {str(e)}")
 
     if request.method == "POST" and request.is_ajax:
         return HttpResponse(json.dumps(result), content_type="application/text")
@@ -1432,7 +1434,9 @@ def task(request, acl_id) -> bool:
     result_id = None
     doc_ready = False
     if "ACT_MAKE_GIT" in request.session:
-        update_callback_status(request, acl_id, "git_upload_status", "Генерация md файла")
+        update_callback_status(
+            request, acl_id, "git_upload_status", "Генерация md файла"
+        )
 
     if "ACT_MAKE_DOCX" in request.session:
         update_callback_status(
@@ -1467,7 +1471,7 @@ def task(request, acl_id) -> bool:
             request,
             acl_id,
             "docx_download_status",
-            "Произошла ошибка при создании docx файла: {}".format(e),
+            f"Произошла ошибка при создании docx файла: {e}",
             0,
         )
         is_work_done = False
@@ -1504,7 +1508,7 @@ def task(request, acl_id) -> bool:
             is_work_omni = True
             omni_job = cache.get(acl_id, {})
             if settings.DEBUG:
-                logger.debug("OMNI CACHE STATUS: {}".format(omni_job))
+                logger.debug(f"OMNI CACHE STATUS: {omni_job}")
 
             if omni_job.keys().__len__() > 0 or (
                 obj.status == "JOB" and len(obj.taskid) >= 3
@@ -1594,13 +1598,11 @@ def task(request, acl_id) -> bool:
                         request,
                         acl_id,
                         "omni_email_status",
-                        '<p class="text-success">Обращение под номером {} успешно зарегистрировано</p>'.format(
-                            result_id
-                        ),
+                        f'<p class="text-success">Обращение под номером {result_id} успешно зарегистрировано</p>',
                         2,
                     )
                     update_callback_status(
-                        request, acl_id, "omni_track_id", "{}".format(result_id)
+                        request, acl_id, "omni_track_id", f"{result_id}"
                     )
                     if "ACT_OMNI" in request.session:
                         del request.session["ACT_OMNI"]
@@ -1612,7 +1614,7 @@ def task(request, acl_id) -> bool:
                     )
                 )
                 update_callback_status(
-                    request, acl_id, "omni_email_status", "{}".format(str(e))
+                    request, acl_id, "omni_email_status", f"{str(e)}"
                 )
                 sleep(3)  # Ждем callback для уведомления пользователю
 
@@ -1659,9 +1661,7 @@ def task(request, acl_id) -> bool:
                         request,
                         acl_id,
                         "omni_email_status",
-                        '<p class="text-success">Обращение под номером {} успешно зарегистрировано</p>'.format(
-                            result_id
-                        ),
+                        f'<p class="text-success">Обращение под номером {result_id} успешно зарегистрировано</p>',
                         2,
                     )
                 else:
@@ -1677,8 +1677,8 @@ def task(request, acl_id) -> bool:
         # UpdateCallBackStatus(request, acl_id, 'git_upload_status', 'Генерация md файла')
         try:
             file_md = (
-                    create_markdown_file(request, local_storage, "acl_{}".format(acl_id), acl_id)
-                    or "None"
+                create_markdown_file(request, local_storage, f"acl_{acl_id}", acl_id)
+                or "None"
             )
             if not file_md:
                 send_to_mattermost(f"Не удалось создать md файл. acl_id:{acl_id}")
@@ -1688,23 +1688,23 @@ def task(request, acl_id) -> bool:
                 request,
                 acl_id,
                 "git_upload_file",
-                "<a href='{}'style='font-size: 16px' "
+                f"<a href='{file_md}'style='font-size: 16px' "
                 "class='card-link card-download-file text-primary' "
                 "target='_blank' download>"
                 "<i class='fab fa-github pr-1'>"
-                "</i> Скачать md-файл</a>".format(file_md),
+                "</i> Скачать md-файл</a>",
                 2,
             )
 
             file_md_abs = os.path.join(
-                BASE_DIR, "static/md/" + "acl_{}".format(str(acl_id)) + ".md"
+                BASE_DIR, "static/md/" + f"acl_{str(acl_id)}" + ".md"
             )
             if "/" in file_md_abs:
                 if "linux" not in sys.platform:
                     file_md_abs = file_md_abs.replace("/", "\\")
             if not os.path.exists(file_md_abs):
                 file_md_abs = os.path.join(
-                    BASE_DIR, "static/md/" + "acl_{}".format(str(acl_id)) + ".md"
+                    BASE_DIR, "static/md/" + f"acl_{str(acl_id)}" + ".md"
                 )
                 logger.error("[Формирование md] Ошибка при формировании пути md файла.")
                 update_callback_status(
@@ -1766,9 +1766,7 @@ def task(request, acl_id) -> bool:
                 g.free()
         except Exception as e:
             logger.error(f"Ошибка при отправке в git: {e}")
-            update_callback_status(
-                request, acl_id, "git_upload_status", "{}".format(e), 0
-            )
+            update_callback_status(request, acl_id, "git_upload_status", f"{e}", 0)
             # is_work_done = False
         finally:
             if "ACT_MAKE_GIT" in request.session:
@@ -1804,9 +1802,7 @@ def task(request, acl_id) -> bool:
             obj.save(update_fields=["status", "taskid"])
     if settings.DEBUG:
         print(
-            "REQUEST FINISH, SAVING DATA: {}: {}".format(
-                [job for job in tasklist if job in request.session], JOB
-            )
+            f"REQUEST FINISH, SAVING DATA: {[job for job in tasklist if job in request.session]}: {JOB}"
         )
 
     return HttpResponse(
@@ -1896,7 +1892,7 @@ def taskstatus(request, taskid=None):
         obj = obj[0]  # first el
         if obj.taskid and re.match(r"^\d{3,}$", obj.taskid):
             omni_acl_status, omni_http_status = omni_check_status(obj.taskid)
-            if None == omni_acl_status:
+            if omni_acl_status is None:
                 result = {
                     "error": "Could not check omni status, omni_check_status[1422] return None"
                 }
@@ -1998,9 +1994,7 @@ def makeAndDownloadMdAndDocx(request, acl_id):
             if file_type == "docx":
                 logger.info("[MAKE FILE] Создание docx файла")
                 acl_project = local_storage["acl_create_info.html"][4]
-                gitlab_repo_url = ACLGitlabStore.objects.get(
-                    project=acl_project
-                ).gitlab_url
+                gitlab_repo_url = ACLGitlabStore.objects.get(project=acl_project).gitlab_url
                 file_path = make_doc(
                     request,
                     local_storage,
@@ -2016,10 +2010,8 @@ def makeAndDownloadMdAndDocx(request, acl_id):
                 )
                 logger.info(f"[MAKE FILE] Файл md успешно сформирован:{file_path}")
 
-            if file_path is not None:
-                logger.info(
-                    "[MAKE FILE] Путь к файлу получен. Подготовка к скачиванию."
-                )
+            if file_path:
+                logger.info("[MAKE FILE] Путь к файлу получен. Подготовка к скачиванию.")
                 file_name = os.path.basename(file_path)
                 logger.info(f"[MAKE FILE] Получено имя файла:{file_name}")
                 file_md_abs = os.path.join(
@@ -2031,12 +2023,9 @@ def makeAndDownloadMdAndDocx(request, acl_id):
                 logger.info(
                     f"[MAKE FILE] Сформирован абсолютный путь для скачивания:{file_md_abs}"
                 )
-
                 file = open(file_md_abs, "rb")
                 file_response = FileResponse(file)
-                file_response["Content-Disposition"] = (
-                    f'attachment; filename="{file_name}"'
-                )
+                file_response["Content-Disposition"] = f'attachment; filename="{file_name}"'
                 return file_response
 
         logger.error(
@@ -2123,4 +2112,4 @@ class APIACLInfoView(APIView):
                 "result": result,
             }
         ).data
-        return Response(data=response, status=status.HTTP_200_OK)
\ No newline at end of file
+        return Response(data=response, status=status.HTTP_200_OK)


==== File: acladmin/__init__.py ====
@@ -0,0 +1,3 @@
+from .celery import app as celery_app
+
+__all__ = ("celery_app",)


==== File: acladmin/settings.py ====
@@ -87,6 +87,7 @@ TEMPLATES = [
             "libraries": {
                 "check_ip": "accesslist.templatetags.ip_check",
                 "get_index": "accesslist.templatetags.get_index",
+                "count_empty_strings": "accesslist.templatetags.empty_strings",
             },
         },
     },
@@ -149,7 +150,7 @@ USE_TZ = True
 # https://docs.djangoproject.com/en/3.1/howto/static-files/
 
 STATIC_URL = "/static/"
-# STATIC_ROOT = os.path.join(BASE_DIR, 'static')
+STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
 
 STATICFILES_DIRS = [
     os.path.join(BASE_DIR, "static"),


==== File: acladmin/tasks.py ====
@@ -1,49 +1,63 @@
 import json
 import os
-import time
 
 from celery import shared_task
 from django.apps import apps
 
-
 from acladmin import settings
-from ownerlist.utils import make_doc, celery_send_omnitracker, GitWorker, \
-    create_markdown_file, check_acl_in_omni, send_to_mattermost
+from ownerlist.utils import (
+    GitWorker,
+    celery_send_omnitracker,
+    check_acl_in_omni,
+    create_markdown_file,
+    make_doc,
+    send_to_mattermost,
+)
 
 
 @shared_task
 def send_acl(acl_id, gitlab_repo_url):
-    send_to_mattermost(f"[acl_portal][Celery send_acl] Cтарт задачи.")
+    send_to_mattermost("[acl_portal][Celery send_acl] Cтарт задачи.")
     # 1 Создаём docx файл
-    ACL = apps.get_model('accesslist', "ACL")
+    ACL = apps.get_model("accesslist", "ACL")
     acl_object = ACL.objects.get(id=acl_id)
     acl_data_set = json.loads(acl_object.acltext)
 
     try:
-        doc_result = make_doc(request=None,
-                              data_set=acl_data_set,
-                              fileuuid=acl_object.id,
-                              gitlab_repo_url=gitlab_repo_url,
-                              gitlab_filename=acl_object.git_filename
-                              )
+        doc_result = make_doc(
+            request=None,
+            data_set=acl_data_set,
+            fileuuid=acl_object.id,
+            gitlab_repo_url=gitlab_repo_url,
+            gitlab_filename=acl_object.git_filename,
+        )
     except Exception as e:
         print(f'[acl_portal][Celery send_acl][DEBUG:{settings.DEBUG}] Не удалось сформировать docx файл:{e}.')
         send_to_mattermost(f'[acl_portal][Celery send_acl] Не удалось сформировать docx файл:{e}.')
         return False
 
     docx_url = f"https://acl.vesta.ru/{doc_result[1:]}"
-    send_to_mattermost(f"[acl_portal][Celery send_acl] Старт отправки ACL({acl_object.id}) в omnitracker.")
+    send_to_mattermost(
+        f"[acl_portal][Celery send_acl] Старт отправки ACL({acl_object.id}) в omnitracker."
+    )
     # 2 Отправляем docx файл в omnitracker
-    task_id = celery_send_omnitracker(sender=acl_object.owner.email,
-                                      title=f'SH0458 Запрос на предоставление доступа согласован: {str(acl_object.approve.first().get_full_name())}',
-                                      text=f'Прошу предоставить сетевой доступ, согласно ACL. Согласование владельца ресурса во вложении. Ссылка на ACL :https://acl.vesta.ru/acl/info/{str(acl_object.id)}',
-                                      attach=docx_url,
-                                      uuid=acl_object.id
-                                      )
-    send_to_mattermost(f"[acl_portal][Celery send_acl] ACL({acl_object.id}) отправлен в omnitracker. Получен task_id:({task_id})")
+    task_id = celery_send_omnitracker(
+        sender=acl_object.owner.email,
+        title=f"SH0458 Запрос на предоставление доступа согласован: {str(acl_object.approve.first().get_full_name())}",
+        text=f"Прошу предоставить сетевой доступ, согласно ACL. Согласование владельца ресурса во вложении. Ссылка на ACL :https://acl.vesta.ru/acl/info/{str(acl_object.id)}",
+        attach=docx_url,
+        uuid=acl_object.id,
+    )
+    send_to_mattermost(
+        f"[acl_portal][Celery send_acl] ACL({acl_object.id}) отправлен в omnitracker. Получен task_id:({task_id})"
+    )
     if task_id is None:
-        print(f"[acl_portal][Celery send_acl] Ошибка: Заявку({acl_object.id}) Не удалось отправить в omnitracker.")
-        send_to_mattermost(f"[acl_portal][Celery send_acl] Ошибка: Заявку({acl_object.id}) Не удалось отправить в omnitracker.")
+        print(
+            f"[acl_portal][Celery send_acl] Ошибка: Заявку({acl_object.id}) Не удалось отправить в omnitracker."
+        )
+        send_to_mattermost(
+            f"[acl_portal][Celery send_acl] Ошибка: Заявку({acl_object.id}) Не удалось отправить в omnitracker."
+        )
         return False
 
     acl_object.taskid = task_id
@@ -52,13 +66,17 @@ def send_acl(acl_id, gitlab_repo_url):
 
     # 3 Создаём md файл
     filename_without_extension = os.path.splitext(acl_object.git_filename)[0]
-    md_file = create_markdown_file(request=None,
-                                   json_data=acl_data_set,
-                                   filename=filename_without_extension,
-                                   fileuuid=acl_object.id)
-    if md_file == False:
-        print(f"[acl_portal][Celery send_acl] Ошибка: Не удалось сформировать md файл.")
-        send_to_mattermost(f"[acl_portal][Celery send_acl] Ошибка: Не удалось сформировать md файл.")
+    md_file = create_markdown_file(
+        request=None,
+        json_data=acl_data_set,
+        filename=filename_without_extension,
+        fileuuid=acl_object.id,
+    )
+    if md_file is False:
+        print("[acl_portal][Celery send_acl] Ошибка: Не удалось сформировать md файл.")
+        send_to_mattermost(
+            "[acl_portal][Celery send_acl] Ошибка: Не удалось сформировать md файл."
+        )
     else:
         file_md_abs = os.path.join(settings.BASE_DIR, md_file)
         file_md_abs = os.path.normpath(file_md_abs)
@@ -70,7 +88,7 @@ def send_acl(acl_id, gitlab_repo_url):
                 PATH_OF_GIT_REPO=None,
                 MDFILE=file_md_abs,
                 taskid=acl_object.id,
-                )
+            )
             if g:
                 g.pull()
                 if g.clone():
@@ -79,29 +97,46 @@ def send_acl(acl_id, gitlab_repo_url):
                     if f:
                         if g.addindex(f):
                             if g.push(refspec="develop:develop"):
-                                print(f"[acl_portal][Celery send_acl] acl({acl_object.id}) успешно отправлен в gitlab")
+                                print(
+                                    f"[acl_portal][Celery send_acl] acl({acl_object.id}) успешно отправлен в gitlab"
+                                )
                             else:
-                                print(f"[acl_portal][Celery send_acl] Не удалось отправить acl({acl_object.id}) в gitlab")
-                                send_to_mattermost(f"[acl_portal][Celery send_acl] Не удалось отправить acl({acl_object.id}) в gitlab")
+                                print(
+                                    f"[acl_portal][Celery send_acl] Не удалось отправить acl({acl_object.id}) в gitlab"
+                                )
+                                send_to_mattermost(
+                                    f"[acl_portal][Celery send_acl] Не удалось отправить acl({acl_object.id}) в gitlab"
+                                )
                 g.free()
         else:
-            print(f"[acl_portal][Celery send_acl] Ошибка: Сформированный md файл не существует. Путь:{file_md_abs}")
-            send_to_mattermost(f"[acl_portal][Celery send_acl] Ошибка: Сформированный md файл не существует. Путь:{file_md_abs}")
-    send_to_mattermost(f"[acl_portal][Celery send_acl] Задача успешно отработала")
+            print(
+                f"[acl_portal][Celery send_acl] Ошибка: Сформированный md файл не существует. Путь:{file_md_abs}"
+            )
+            send_to_mattermost(
+                f"[acl_portal][Celery send_acl] Ошибка: Сформированный md файл не существует. Путь:{file_md_abs}"
+            )
+    send_to_mattermost("[acl_portal][Celery send_acl] Задача успешно отработала")
     return task_id
 
 
 @shared_task
 def check_acl_status():
-    send_to_mattermost(f"[acl_portal][Celery check_acl_status][DEBUG:{settings.DEBUG}] Cтарт задачи.")
     ACL = apps.get_model("accesslist", "ACL")
-    acl_objects = ACL.objects.filter(status="JOB", taskid__isnull=False).exclude(taskid="")
-    send_to_mattermost(f"[acl_portal][Celery check_acl_status] Cтарт проверки статуса заявок. Всего на проверке: {len(acl_objects)}.")
+    acl_objects = ACL.objects.filter(status="JOB", taskid__isnull=False).exclude(
+        taskid=""
+    )
     for acl_object in acl_objects:
         try:
             check_acl_in_omni(acl_object)
-            time.sleep(15)
         except Exception as e:
-            print(f"[acl_portal][Celery check_acl_status] Ошибка проверки статуса acl({acl_object.id}). Ошибка:{e}")
-            send_to_mattermost(f"[acl_portal][Celery check_acl_status] Ошибка проверки статуса acl({acl_object.id}). Ошибка:{e}")
-    send_to_mattermost(f"[acl_portal][Celery check_acl_status] Задача успешно отработала.")
+            print(
+                f"[acl_portal][Celery check_acl_status] Ошибка проверки статуса acl({acl_object.id}). Ошибка:{e}"
+            )
+            send_to_mattermost(
+                f"[acl_portal][Celery check_acl_status] Ошибка проверки статуса acl({acl_object.id}). Ошибка:{e}"
+            )
+
+
+@shared_task
+def test_task():
+    print("Test task executed")


==== File: ownerlist/utils.py ====
@@ -41,7 +41,6 @@ from docx.shared import Pt, RGBColor
 from tests.mocks.mock_omni_check_status import mock_omni_check_status_200
 from tests.mocks.mock_send_omnitracker import mock_send_omnitracker_200
 
-
 try:
     from requests_ntlm import HttpNtlmAuth
 except ImportError:
@@ -286,7 +285,7 @@ def request_handler(request, namespace=""):
                         v = v.replace("\n\n", "\n")
                     except Exception as e:
                         if settings.DEBUG:
-                            logger.error("{} {}".format(stack()[0][3], e))
+                            logger.error(f"{stack()[0][3]} {e}")
                 if str_pattern in str(k):
                     if namespace in LOCAL_STORAGE:
                         LOCAL_STORAGE[namespace].append([v])
@@ -327,7 +326,7 @@ def upload_file_handler(request, functionhandler=None):
             UPLOAD_PATH, myfile.name
         )  # bug with persone encode'
         if settings.DEBUG:
-            print("Upload file to: {}".format(uploaded_file_url))
+            print(f"Upload file to: {uploaded_file_url}")
     else:
         result["error"] = "Отсутствуют файлы для загрузки"
         return result
@@ -349,12 +348,12 @@ def upload_file_handler(request, functionhandler=None):
     try:
         os.remove(uploaded_file_url)
         if settings.DEBUG:
-            print("Удаление файла: {}".format(uploaded_file_url))
+            print(f"Удаление файла: {uploaded_file_url}")
     finally:
         uploaded_file_url = None
     if isinstance(result, int):
         if result > 0:
-            return {"ok": "Добавлено новых значений: {}".format(result)}
+            return {"ok": f"Добавлено новых значений: {result}"}
     else:
         if isinstance(result, dict):
             if "LOCAL_STORAGE" in result:
@@ -404,9 +403,7 @@ def DeepSearch(request, string: str = ""):
             messages.add_message(
                 request,
                 messages.INFO,
-                "По запросу {} ничего не найдено, но мы нашли похожую информацию:".format(
-                    string
-                ),
+                f"По запросу {string} ничего не найдено, но мы нашли похожую информацию:",
             )
     if not result:
         if re.match(r"[a-zA-Z0-9][a-zA-Z0-9-._]{1,61}", tmp):
@@ -429,9 +426,7 @@ def DeepSearch(request, string: str = ""):
                     messages.add_message(
                         request,
                         messages.INFO,
-                        "По запросу {} ничего не найдено, но мы нашли похожую информацию:".format(
-                            string
-                        ),
+                        f"По запросу {string} ничего не найдено, но мы нашли похожую информацию:",
                     )
                 if not result:
                     result = Iplist.objects.filter(comment__icontains=tmp)[:5]
@@ -439,9 +434,7 @@ def DeepSearch(request, string: str = ""):
                         messages.add_message(
                             request,
                             messages.INFO,
-                            "По запросу {} ничего не найдено, но мы нашли похожую информацию:".format(
-                                string
-                            ),
+                            f"По запросу {string} ничего не найдено, но мы нашли похожую информацию:",
                         )
                     else:
                         try:
@@ -454,18 +447,14 @@ def DeepSearch(request, string: str = ""):
                             messages.add_message(
                                 request,
                                 messages.INFO,
-                                "По запросу {} ничего не найдено, но мы нашли похожую информацию:".format(
-                                    string
-                                ),
+                                f"По запросу {string} ничего не найдено, но мы нашли похожую информацию:",
                             )
 
     if re.match("[A-Za-zА-Яа-я\d\.]{3,20}", tmp):
         tmp = tmp.replace("%", " ").replace("'", " ")
         row_query = Acl.objects.filter(
             id__in=RawSQL(
-                "select id from accesslist_acl where acltext::text like '%%{}%%' limit 5".format(
-                    tmp
-                ),
+                f"select id from accesslist_acl where acltext::text like '%%{tmp}%%' limit 5",
                 tmp,
             )
         )
@@ -557,7 +546,7 @@ class ExtractDataXls:
             self.current_page = self.rb.sheet_by_name(self.sheet_tag)
             if self.current_page.nrows == 0:  # Count row
                 if settings.DEBUG:
-                    print("Страница {} пустая, пропущено...".format(self.current_page))
+                    print(f"Страница {self.current_page} пустая, пропущено...")
                     return 0
             if self.sheet_tag == "VLAN DESCRIPTION":
                 result += self.ExtractVlanInfo()
@@ -592,9 +581,7 @@ class ExtractDataXls:
             else:
                 if settings.DEBUG:
                     print(
-                        "Страница содержит другое количество колонок <> 4, {} анализируем...".format(
-                            self.current_page.ncols
-                        )
+                        f"Страница содержит другое количество колонок <> 4, {self.current_page.ncols} анализируем..."
                     )
                 result += self.PageStructAnalyzer(self.current_page)
         return result
@@ -686,7 +673,7 @@ class ExtractDataXls:
                 for tag in tags:
                     if (tag != "") and len(tag) > 1:
                         if len(str(tag).split(".")) >= 3:  # If tag as Gateway's IP
-                            tag = "Gateway: {}".format(tag)
+                            tag = f"Gateway: {tag}"
                         tag_info, _ = self.Tags.objects.get_or_create(
                             name=str(tag).rstrip()
                         )
@@ -700,7 +687,7 @@ class ExtractDataXls:
                 tags.clear()
 
         if settings.DEBUG:
-            print("Добавленно {} новых записей в БД.".format(self.count_total))
+            print(f"Добавленно {self.count_total} новых записей в БД.")
 
         return self.count_total
 
@@ -759,9 +746,7 @@ class ExtractDataXls:
                         else:
                             if settings.DEBUG:
                                 print(
-                                    "********************Ошибка при анализе странице {}****************".format(
-                                        self.sheet_tag
-                                    )
+                                    f"********************Ошибка при анализе странице {self.sheet_tag}****************"
                                 )
                         return 0
                     continue
@@ -854,9 +839,7 @@ class ExtractDataXls:
 
                     except DataError:
                         print(
-                            "- Ошибка данных: {} на странице: {}".format(
-                                ip_addr, self.sheet_tag
-                            )
+                            f"- Ошибка данных: {ip_addr} на странице: {self.sheet_tag}"
                         )
                         continue
 
@@ -879,7 +862,7 @@ class ExtractDataXls:
 
                         tags.clear()
         if settings.DEBUG:
-            print("Страница: {} записано: {}".format(self.sheet_tag, self.count_total))
+            print(f"Страница: {self.sheet_tag} записано: {self.count_total}")
         return self.count_total
 
     def PageStructAnalyzer(self, page, DEBUG=False) -> None:
@@ -908,9 +891,7 @@ class ExtractDataXls:
         #     print('')
         if not (page.ncols > 0):  # and page.ncols < 6
             print(
-                "Page {} has been skipped, unknown amount col {}".format(
-                    self.sheet_tag, page.ncols
-                )
+                f"Page {self.sheet_tag} has been skipped, unknown amount col {page.ncols}"
             )
         else:
             for idx_col in range(page.ncols):
@@ -991,7 +972,7 @@ class ExtractDataXls:
                                     continue
 
                 max_v = max(col_stat, key=col_stat.get)
-                if "Unknown" == max_v:
+                if max_v == "Unknown":
                     continue
                 elif max_v == "is_domain":
                     col_index["domain"] = idx_col
@@ -1120,7 +1101,7 @@ def make_doc(
 
     def normalize_whitespace(data_set):
         for data_idx, data in enumerate(data_set):
-            if data == 'acl_traffic.html':
+            if data == "acl_traffic.html":
                 for row_idx, row in enumerate(data_set[data]):
                     if len(row) == 7:
                         data_set[data][row_idx].append(" ")
@@ -1152,7 +1133,7 @@ def make_doc(
         data_set = normalize_whitespace(data_set)
         gitlab_data_set = normalize_whitespace(gitlab_data_set)
     else:
-        print('Не удалось получить gitlab_data_set')
+        print("Не удалось получить gitlab_data_set")
         gitlab_data_set = data_set
 
     if request:
@@ -1232,8 +1213,12 @@ def make_doc(
                                 run.font.highlight_color = WD_COLOR_INDEX.GREEN
                                 run.font.color.rgb = RGBColor(255, 255, 255)
                         try:
-                            strike_paragraph = table_tmp.cell(row_idx, 1).add_paragraph()
-                            run_strike = strike_paragraph.add_run(str(gitlab_data_set.get(data, [])[row_idx]))
+                            strike_paragraph = table_tmp.cell(
+                                row_idx, 1
+                            ).add_paragraph()
+                            run_strike = strike_paragraph.add_run(
+                                str(gitlab_data_set.get(data, [])[row_idx])
+                            )
                             run_strike.font.strike = True
                             run_strike.font.highlight_color = WD_COLOR_INDEX.RED
                             run_strike.font.color.rgb = RGBColor(255, 255, 255)
@@ -1242,7 +1227,9 @@ def make_doc(
                 except Exception as e:
                     logger.error(e)
             if notFoundCount > 0:
-                logger.info(f"Не удалось найти {notFoundCount} строк(и) страницы Контакты в gitlab")
+                logger.info(
+                    f"Не удалось найти {notFoundCount} строк(и) страницы Контакты в gitlab"
+                )
         else:
             row_cnt = 0
             if data not in data_set:
@@ -1256,8 +1243,12 @@ def make_doc(
                                     cell = table_tmp.cell(key, cell_idx)
                                     cell.text = str(cell_val)
                                     cell.paragraphs[0].runs[0].font.strike = True
-                                    cell.paragraphs[0].runs[0].font.highlight_color = WD_COLOR_INDEX.RED
-                                    cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(255, 255, 255)
+                                    cell.paragraphs[0].runs[
+                                        0
+                                    ].font.highlight_color = WD_COLOR_INDEX.RED
+                                    cell.paragraphs[0].runs[0].font.color.rgb = (
+                                        RGBColor(255, 255, 255)
+                                    )
                         except Exception as e:
                             logger.error(f"[restore from gitlab data set error ] {e}")
                 continue
@@ -1276,8 +1267,12 @@ def make_doc(
                             for cell_idx, cell_val in enumerate(value):
                                 try:
                                     cell = table_tmp.cell(key, cell_idx)
-                                    cell.paragraphs[0].runs[0].font.highlight_color = WD_COLOR_INDEX.GREEN
-                                    cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(255, 255, 255)
+                                    cell.paragraphs[0].runs[
+                                        0
+                                    ].font.highlight_color = WD_COLOR_INDEX.GREEN
+                                    cell.paragraphs[0].runs[0].font.color.rgb = (
+                                        RGBColor(255, 255, 255)
+                                    )
                                 except Exception as e:
                                     logger.error(e)
                         else:
@@ -1285,8 +1280,12 @@ def make_doc(
                                 for cell_idx, cell_val in enumerate(value):
                                     try:
                                         cell = table_tmp.cell(key, cell_idx)
-                                        cell.paragraphs[0].runs[0].font.highlight_color = WD_COLOR_INDEX.GREEN
-                                        cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(255, 255, 255)
+                                        cell.paragraphs[0].runs[
+                                            0
+                                        ].font.highlight_color = WD_COLOR_INDEX.GREEN
+                                        cell.paragraphs[0].runs[0].font.color.rgb = (
+                                            RGBColor(255, 255, 255)
+                                        )
                                     except Exception as e:
                                         logger.error(e)
                     row_cnt += 1
@@ -1300,20 +1299,28 @@ def make_doc(
             for row_idx, row_val in enumerate(gitlab_data_set[data], start=1):
                 try:
                     if row_val not in data_set[data]:
-                        logger.info(f'На портале отсутствует строка: {row_val}')
-                        if len(row_val) <= table_cols and any(cell_val for cell_val in row_val):  # check if row is not empty
+                        logger.info(f"На портале отсутствует строка: {row_val}")
+                        if len(row_val) <= table_cols and any(
+                            cell_val for cell_val in row_val
+                        ):  # check if row is not empty
                             new_row = table_tmp.add_row()  # add a new row
                             for cell_idx, cell_val in enumerate(row_val):
-                                cell = new_row.cells[cell_idx]  # get the cell in the new row
+                                cell = new_row.cells[
+                                    cell_idx
+                                ]  # get the cell in the new row
                                 cell.text = str(cell_val)  # set the cell text
-                                cell.paragraphs[0].runs[0].font.highlight_color = WD_COLOR_INDEX.RED
-                                cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(255, 255, 255)
+                                cell.paragraphs[0].runs[
+                                    0
+                                ].font.highlight_color = WD_COLOR_INDEX.RED
+                                cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(
+                                    255, 255, 255
+                                )
                                 cell.paragraphs[0].runs[0].font.strike = True
                 except Exception as e:
                     logger.error(e)
         # Очистка пустых строк
         for row in table_tmp.rows:
-            if all(cell.text.strip() == '' for cell in row.cells):
+            if all(cell.text.strip() == "" for cell in row.cells):
                 table_tmp._tbl.remove(row._tr)
 
     if is_in_session:
@@ -1396,7 +1403,7 @@ def table(records, fields, headings=None, alignment=None, file=None):
     elif len(extended_align) < num_columns:
         extended_align += [("^", "<") for i in range[num_columns - len(extended_align)]]
 
-    heading_align, cell_align = [x for x in zip(*extended_align)]
+    heading_align, cell_align = (x for x in zip(*extended_align))  # noqa: B905
 
     field_widths = [
         len(max(column, key=len)) if len(column) > 0 else 0 for column in columns
@@ -1407,20 +1414,28 @@ def table(records, fields, headings=None, alignment=None, file=None):
     else:
         heading_widths = field_widths
 
-    column_widths = [max(x) for x in zip(field_widths, heading_widths)]
+    column_widths = [max(x) for x in zip(field_widths, heading_widths)]  # noqa: B905
 
     _ = " | ".join(
-        ["{:" + a + str(w) + "}" for a, w in zip(heading_align, column_widths)]
+        [
+            "{:" + a + str(w) + "}"
+            for a, w in zip(heading_align, column_widths)  # noqa: B905
+        ]
     )
     heading_template = "| " + _ + " |"
-    _ = " | ".join(["{:" + a + str(w) + "}" for a, w in zip(cell_align, column_widths)])
+    _ = " | ".join(
+        [
+            "{:" + a + str(w) + "}"
+            for a, w in zip(cell_align, column_widths)  # noqa: B905
+        ]
+    )
 
     row_template = "| " + _ + " |"
 
     _ = " | ".join(
         [
             left_rule[a] + "-" * (w - 2) + right_rule[a]
-            for a, w in zip(cell_align, column_widths)
+            for a, w in zip(cell_align, column_widths)  # noqa: B905
         ]
     )
     ruling = "| " + _ + " |"
@@ -1429,17 +1444,19 @@ def table(records, fields, headings=None, alignment=None, file=None):
         if headings:
             file.write(heading_template.format(*headings).rstrip() + "\n")
         file.write(ruling.rstrip() + "\n")
-        for row in zip(*columns):
+        for row in zip(*columns):  # noqa: B905
             file.write(row_template.format(*row).rstrip() + "\n")
         file.write("\n")
         file.write("\n")
 
 
 def create_markdown_file(request, json_data, filename, fileuuid=""):
-    """ Создает markdown-файл из JSON-данных """
-    print("[create_markdown_file] Create md")
+    """Создает markdown-файл из JSON-данных"""
+
     if request:
-        update_callback_status(request, fileuuid, "git_upload_status", "Создание md файла")
+        update_callback_status(
+            request, fileuuid, "git_upload_status", "Создание md файла"
+        )
 
     try:
         file_path = os.path.join(BASE_DIR, f"static/md/{filename}.md")
@@ -1459,19 +1476,21 @@ def create_markdown_file(request, json_data, filename, fileuuid=""):
         md_handle_error(filename, fileuuid, e)
         return False
     if request:
-        update_callback_status(request, fileuuid, "git_upload_status", "The md file Created")
-    return f"/static/md/{filename}.md"
+        update_callback_status(
+            request, fileuuid, "git_upload_status", "The md file Created"
+        )
+    return f"static/md/{filename}.md"
 
 
 def md_write_acl_create_info(file, data):
     logger.debug("[MakeMarkDown] acl_create_info")
     print("[MakeMarkDown] acl_create_info")
-    file.write("## {}\n".format(data[4]))
+    file.write(f"## {data[4]}\n")
     file.write("##### Описание доступа к ресурсам\n")
 
     if data:
         fields = [0, 1]
-        tmp = zip(contact_table, data)
+        tmp = zip(contact_table, data)  # noqa: B905
         table(
             records=tmp,
             fields=fields,
@@ -1482,7 +1501,9 @@ def md_write_acl_create_info(file, data):
 
 
 def md_write_acl_internal_resources(file, data):
-    logger.debug("[write_acl_internal_resources_to_markdown] Запись внутренних ресурсов")
+    logger.debug(
+        "[write_acl_internal_resources_to_markdown] Запись внутренних ресурсов"
+    )
     print("[write_acl_internal_resources_to_markdown] Запись внутренних ресурсов")
 
     file.write("\n##### Список внутренних ресурсов (СГ АльфаСтрахование)\n")
@@ -1536,7 +1557,9 @@ def md_write_acl_traffic(file, data):
     file.write("\n##### Потоки трафика\n")
 
     if data:
-        max_length = max(len(item) for item in data)
+        # TODO временно до момента реструктуризации поля Acltext
+        # max_length = max(len(item) for item in data)
+        max_length = len(traffic_column)
         data = [item + [" "] * (max_length - len(item)) for item in data]
 
         table(
@@ -1587,14 +1610,12 @@ class GitWorker:
                     request,
                     taskid,
                     "git_upload_status",
-                    "Ошибка при инициализации Repo: {}".format(PATH_OF_GIT_REPO),
+                    f"Ошибка при инициализации Repo: {PATH_OF_GIT_REPO}",
                     0,
                 )
                 return False
             if settings.DEBUG:
-                logger.debug(
-                    "Инициализация GIT репозитория {}".format(PATH_OF_GIT_REPO)
-                )
+                logger.debug(f"Инициализация GIT репозитория {PATH_OF_GIT_REPO}")
         else:
             tmp = os.path.join(tempfile.gettempdir(), uid)
             try:
@@ -1607,15 +1628,13 @@ class GitWorker:
                     request,
                     taskid,
                     "git_upload_status",
-                    "Ошибка при инициализации Repo: {}".format(tmp),
+                    f"Ошибка при инициализации Repo: {tmp}",
                     0,
                 )
                 return False
             if settings.DEBUG:
                 logger.debug(
-                    "Инициализация GIT репозитория {}".format(
-                        os.path.join(tempfile.gettempdir(), uid)
-                    )
+                    f"Инициализация GIT репозитория {os.path.join(tempfile.gettempdir(), uid)}"
                 )
 
         self.request = request
@@ -1661,9 +1680,7 @@ class GitWorker:
             )
             # self.request.session['git_upload_status'].append({'status': "Создание временой папки: {}".format(self.PATH_OF_GIT_REPO)})
             if settings.DEBUG:
-                logger.debug(
-                    "Создание временой папки: {}".format(self.PATH_OF_GIT_REPO)
-                )
+                logger.debug(f"Создание временой папки: {self.PATH_OF_GIT_REPO}")
         # else:
         # os.path.join(BASE_DIR, 'upload')
         if not os.path.exists(MDFILE):
@@ -1671,7 +1688,7 @@ class GitWorker:
         else:
             self.MDFILE = MDFILE
         if settings.DEBUG:
-            logger.debug("Путь к md файлу: {}".format(self.MDFILE))
+            logger.debug(f"Путь к md файлу: {self.MDFILE}")
 
     def free(self):
         for i in range(1, 3):
@@ -1733,10 +1750,10 @@ class GitWorker:
             self.request,
             self.taskid,
             "git_upload_status",
-            "Скачано: {} файлов".format(len(self.repo.index.entries)),
+            f"Скачано: {len(self.repo.index.entries)} файлов",
         )
         if settings.DEBUG:
-            logger.debug("Скачано: {} файлов".format(len(self.repo.index.entries)))
+            logger.debug(f"Скачано: {len(self.repo.index.entries)} файлов")
         return True
 
     def fetch(self):
@@ -1786,9 +1803,7 @@ class GitWorker:
                 # self.request.session['git_upload_status'].append({'error': "Ошибка при копировании файла в проект: {}".format(dfile)})
                 if settings.DEBUG:
                     logger.debug(
-                        "Ошибка при копировании файла {} в проект: {}".format(
-                            sfile, dfile
-                        )
+                        f"Ошибка при копировании файла {sfile} в проект: {dfile}"
                     )
                 return 0
             update_callback_status(
@@ -1799,7 +1814,7 @@ class GitWorker:
             )
             # self.request.session['git_upload_status'].append({'status': "Копирование файла в проект: {}".format(dfile)})
             if settings.DEBUG:
-                logger.debug("Копирование файла в проект: {}".format(dfile))
+                logger.debug(f"Копирование файла в проект: {dfile}")
         except Exception:
             # self.request.session['git_upload_status'].append({'error': "Возникла ошибка при копировании md файла в папку проекта"})
             update_callback_status(
@@ -1843,7 +1858,7 @@ class GitWorker:
                 0,
             )
             if settings.DEBUG:
-                logger.error("Ошибка при локальном коммите: {}".format(e))
+                logger.error(f"Ошибка при локальном коммите: {e}")
             return False
         return True
 
@@ -1992,7 +2007,7 @@ def ExtractDataDns(uploaded_file_url) -> int:
                         for tmp in buff[cname]:
                             s = tmp.split()
                             if line[3] == s[0]:
-                                owner = "{} CNAME {}".format(owner, line[3])
+                                owner = f"{owner} CNAME {line[3]}"
                                 if len(s) >= 5:
                                     line[3] = s[4]
                                 else:
@@ -2002,7 +2017,7 @@ def ExtractDataDns(uploaded_file_url) -> int:
                         try:
                             r = socket.gethostbyname(line[3])
                             if r:
-                                owner = "{} CNAME {}".format(owner, line[3])
+                                owner = f"{owner} CNAME {line[3]}"
                                 line[3] = r
                         except:
                             pass
@@ -2043,7 +2058,7 @@ def ExtractDataDns(uploaded_file_url) -> int:
 
                 except DataError as e:
                     if settings.DEBUG:
-                        print("- Ошибка данных: {}".format(e))
+                        print(f"- Ошибка данных: {e}")
 
                 if created3:
                     ip_info.tags.add(tag_info)
@@ -2092,8 +2107,8 @@ def ClearSessionMeta(request=None):
 
 
 def MakeTemporaryToken():
-    s = "{} ACL token {}".format(random.randrange(999), datetime.datetime.now())
-    return "{}".format(hashlib.md5(s.encode()).hexdigest()[:10])
+    s = f"{random.randrange(999)} ACL token {datetime.datetime.now()}"
+    return f"{hashlib.md5(s.encode()).hexdigest()[:10]}"
 
 
 def compare_first_column(doc1, doc2):
@@ -2107,7 +2122,7 @@ def compare_first_column(doc1, doc2):
 
 
 def compare_table_headers(doc1, doc2):
-    for table1, table2 in zip(doc1.tables[1:], doc2.tables[1:]):
+    for table1, table2 in zip(doc1.tables[1:], doc2.tables[1:]):  # noqa: B905
         headers1 = [cell.text for cell in table1.rows[0].cells]
         headers2 = [cell.text for cell in table2.rows[0].cells]
         if headers1 != headers2:
@@ -2205,7 +2220,7 @@ def ParseDocx(file):
         if "is not a Word" in str(e):
             result["error"] = "Ошибка при загрузке старого формата doc файла"
         else:
-            result["error"] = "{}".format(e)
+            result["error"] = f"{e}"
     except opc.exceptions.PackageNotFoundError:
         result["error"] = "Ошибка, вероятно это не docx файл"
     except Exception as e:
@@ -2216,9 +2231,9 @@ def ParseDocx(file):
             result["LOCAL_STORAGE"] = LOCAL_STORAGE
         result["META"] = {}
         if FIX_STATISTICS > 0:
-            result["META"]["fixed"] = "{}".format(FIX_STATISTICS)
+            result["META"]["fixed"] = f"{FIX_STATISTICS}"
         if SKIP__STATISTICS > 0:
-            result["META"]["skipped"] = "{}".format(SKIP__STATISTICS)
+            result["META"]["skipped"] = f"{SKIP__STATISTICS}"
     return result
 
 
@@ -2270,34 +2285,33 @@ def GetNumberFromMask(mask=""):
 def send_onmitracker(
     sender, title, text, attach, proxy=None, fake=None, request=None, uid=None
 ):
-    """Функция для отправки обращения напрямую в SD  получения номера зарегистрированного обращения"""
+    """Функция для отправки обращения напрямую в SD получения номера зарегистрированного обращения"""
+
     try:
         send_to_mattermost(
             f"Попытка отправки обращения в omnitracker. sender: {sender}; title:{title}; Ссылка на ACL :https://acl.vesta.ru/acl/info/{str(uid)}"
         )
     except Exception as e:
         logger.warning(f"[SEND_TO_MATTERMOST EXCEPTION] {e}")
-    bodyNotEncoded = """<?xml version="1.0" encoding="utf-8"?>
+    bodyNotEncoded = f"""<?xml version="1.0" encoding="utf-8"?>
                 <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.omninet.de/OtWebSvc/v1">
         <soap:Body>
             <tns:InvokeScript>
                <tns:Script name="OmniAPI" runAt="Server">
                     <tns:Parameters>
                         <tns:StringVal name='strFunction'>CreateIncidentFromTemplateWithAttachmentAndExternalNumber</tns:StringVal>
-                        <tns:StringVal name='strEMail'>{}</tns:StringVal>
-                        <tns:StringVal name='strTitle'>{}</tns:StringVal>
-                        <tns:StringVal name='strDescription'>{}</tns:StringVal>
+                        <tns:StringVal name='strEMail'>{sender}</tns:StringVal>
+                        <tns:StringVal name='strTitle'>{title}</tns:StringVal>
+                        <tns:StringVal name='strDescription'>{text}</tns:StringVal>
                         <tns:StringVal name='strTemplateCode'>SH0458</tns:StringVal>
-                        <tns:StringVal name='strExternalNumber'>{}</tns:StringVal>
-                        <tns:StringVal name='strAttachmentPath'>{}</tns:StringVal>
+                        <tns:StringVal name='strExternalNumber'>{str(uid)}</tns:StringVal>
+                        <tns:StringVal name='strAttachmentPath'>{attach}</tns:StringVal>
                     </tns:Parameters>
                 </tns:Script>
             </tns:InvokeScript>
         </soap:Body>
         </soap:Envelope>
-        """.format(
-        sender, title, text, str(uid), attach
-    )
+        """
 
     body = bodyNotEncoded.encode("utf-8")
     logger.debug("BODY NOT ENCODED:" + str(bodyNotEncoded))
@@ -2306,10 +2320,7 @@ def send_onmitracker(
 
     try:
         auth = HttpNtlmAuth(
-            "{}\\{}".format(
-                settings.LDAP_AUTH_CONNECTION_DOMAIN,
-                settings.LDAP_AUTH_CONNECTION_USERNAME,
-            ),
+            f"{settings.LDAP_AUTH_CONNECTION_DOMAIN}\\{settings.LDAP_AUTH_CONNECTION_USERNAME}",
             settings.LDAP_AUTH_CONNECTION_PASSWORD,
         )
     except Exception as e:
@@ -2319,19 +2330,17 @@ def send_onmitracker(
     for i in range(settings.ATTEMPS):
         try:
             # time.sleep(5)
-            logger.debug(
-                "[{}] Отправка запроса в {}".format(i, settings.OMNITRACKER_URL)
-            )
+            logger.debug(f"[{i}] Отправка запроса в {settings.OMNITRACKER_URL}")
             logger.debug("[TRACE] Тело запроса: " + body.decode())
             if settings.DEBUG:
                 res = mock_send_omnitracker_200(
-                                                taskid="777777",
-                                                omnitracker_url=settings.OMNITRACKER_URL,
-                                                body=body,
-                                                headers=OMNI_HTTP_HEADERS,
-                                                timeout=settings.TIMEOUT,
-                                                auth=auth
-                                                )
+                    taskid="777777",
+                    omnitracker_url=settings.OMNITRACKER_URL,
+                    body=body,
+                    headers=OMNI_HTTP_HEADERS,
+                    timeout=settings.TIMEOUT,
+                    auth=auth,
+                )
             else:
                 res = requests.post(
                     settings.OMNITRACKER_URL,
@@ -2372,9 +2381,7 @@ def send_onmitracker(
                             )
                             if settings.DEBUG:
                                 logger.error(
-                                    "[TRACE] Сервер omni вернул неправильный ответ {} ".format(
-                                        res.text
-                                    )
+                                    f"[TRACE] Сервер omni вернул неправильный ответ {res.text} "
                                 )
 
                             result = 0
@@ -2384,10 +2391,7 @@ def send_onmitracker(
                     if "requests_ntlm" in sys.modules:
                         try:
                             auth = HttpNtlmAuth(
-                                "{}\\{}".format(
-                                    settings.LDAP_AUTH_CONNECTION_DOMAIN,
-                                    settings.LDAP_AUTH_CONNECTION_USERNAME,
-                                ),
+                                f"{settings.LDAP_AUTH_CONNECTION_DOMAIN}\\{settings.LDAP_AUTH_CONNECTION_USERNAME}",
                                 settings.LDAP_AUTH_CONNECTION_PASSWORD,
                             )
                         except Exception as e:
@@ -2401,7 +2405,7 @@ def send_onmitracker(
                     request,
                     uid,
                     "omni_email_status",
-                    "Повторная отправка сообщения в SD ({})".format(i),
+                    f"Повторная отправка сообщения в SD ({i})",
                     0,
                 )
                 sleep(i)
@@ -2414,15 +2418,13 @@ def send_onmitracker(
                 f"Ссылка на ACL: https://acl.vesta.ru/acl/info/{str(uid)}",
             )
             logger.error(
-                "[TRACE] Подключение не удалось по таймауту к {}".format(
-                    settings.OMNITRACKER_URL
-                )
+                f"[TRACE] Подключение не удалось по таймауту к {settings.OMNITRACKER_URL}"
             )
             update_callback_status(
                 request,
                 uid,
                 "omni_email_status",
-                "Повторная отправка сообщения в SD ({})".format(i),
+                f"Повторная отправка сообщения в SD ({i})",
                 1,
             )
         except requests.ConnectionError:
@@ -2433,14 +2435,12 @@ def send_onmitracker(
                 f"OMNITRACKER_URL: {settings.OMNITRACKER_URL}",
                 f"Ссылка на ACL: https://acl.vesta.ru/acl/info/{str(uid)}",
             )
-            logger.error(
-                "[TRACE] Сервис {} не отвечает".format(settings.OMNITRACKER_URL)
-            )
+            logger.error(f"[TRACE] Сервис {settings.OMNITRACKER_URL} не отвечает")
             update_callback_status(
                 request,
                 uid,
                 "omni_email_status",
-                "Повторная отправка сообщения в SD ({})".format(i),
+                f"Повторная отправка сообщения в SD ({i})",
                 1,
             )
 
@@ -2455,7 +2455,7 @@ def send_onmitracker(
                 request,
                 uid,
                 "omni_email_status",
-                "Повторная отправка сообщения в SD ({})".format(i),
+                f"Повторная отправка сообщения в SD ({i})",
                 1,
             )
             logger.error("[Omni request] " + str(e))
@@ -2470,76 +2470,77 @@ def send_onmitracker(
 
 
 def omni_check_status(id=None, proxy=None):
-    body = """<?xml version="1.0" encoding="utf-8"?>
+    body = f"""<?xml version="1.0" encoding="utf-8"?>
 <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.omninet.de/OtWebSvc/v1">
 <soap:Body>
    <tns:InvokeScript>
      <tns:Script name="OmniAPI" runAt="Server">
                                <tns:Parameters>
                                                <tns:StringVal name="strFunction">GetIncStateByNumber</tns:StringVal>
-                                               <tns:LongIntVal name="lngNumber">{}</tns:LongIntVal>
+                                               <tns:LongIntVal name="lngNumber">{id}</tns:LongIntVal>
                               </tns:Parameters>
     </tns:Script>
    </tns:InvokeScript>
 </soap:Body>
 </soap:Envelope>
-""".format(
-        id
-    ).encode(
-        "utf-8"
-    )
-    result = ""
+""".encode()
 
+    result = ""
+    max_retries = 3
     try:
         auth = HttpNtlmAuth(
-            "{}\\{}".format(
-                settings.LDAP_AUTH_CONNECTION_DOMAIN,
-                settings.LDAP_AUTH_CONNECTION_USERNAME,
-            ),
+            f"{settings.LDAP_AUTH_CONNECTION_DOMAIN}\\{settings.LDAP_AUTH_CONNECTION_USERNAME}",
             settings.LDAP_AUTH_CONNECTION_PASSWORD,
         )
     except Exception as e:
         logger.error(f"Ошибка авторизации LDAP: {e}")
         print(f"Ошибка авторизации LDAP: {e}")
 
-    try:
-        if settings.DEBUG:
-            r = mock_omni_check_status_200(acl_status="Assigned",
-                                           omnitracker_url=settings.OMNITRACKER_URL,
-                                           body=body,
-                                           headers=OMNI_HTTP_HEADERS,
-                                           proxies=proxy,
-                                           auth=auth,
-                                           timeout=1)
-        else:
-            r = requests.post(
-                settings.OMNITRACKER_URL,
-                body,
-                headers=OMNI_HTTP_HEADERS,
-                proxies=proxy,
-                auth=auth,
-                timeout=1,
+    for attempt in range(max_retries):
+        try:
+            if settings.DEBUG:
+                r = mock_omni_check_status_200(
+                    acl_status="Assigned",
+                    omnitracker_url=settings.OMNITRACKER_URL,
+                    body=body,
+                    headers=OMNI_HTTP_HEADERS,
+                    proxies=proxy,
+                    auth=auth,
+                    timeout=1,
+                )
+            else:
+                r = requests.post(
+                    settings.OMNITRACKER_URL,
+                    body,
+                    headers=OMNI_HTTP_HEADERS,
+                    proxies=proxy,
+                    auth=auth,
+                    timeout=1,
+                )
+            if r.status_code == 200:
+                try:
+                    result = r.text
+                    if result and len(result) > 3:
+                        result = result.split('strResponse">')
+                        result = result[1].split("</")[0]
+                    return OMNI_ACL_STATUS.get(result), OMNI_HTTP_STATUS.get(result)
+                except Exception as e:
+                    logger.error("[Check status] " + str(e))
+                    if settings.DEBUG:
+                        print(e)
+                    return None, None
+
+        except Exception as e:
+            logger.info(f"Ошибка на попытке {attempt + 1} ID:{id} - {e}")
+            send_to_mattermost(
+                f"[omni_check_status] Ошибка на попытке {attempt + 1} ID:{id} - {e}"
             )
-        if r.status_code == 200:
-            try:
-                result = r.text
-                if result and len(result) > 3:
-                    result = result.split('strResponse">')
-                    result = result[1].split("</")[0]
-                return OMNI_ACL_STATUS.get(result), OMNI_HTTP_STATUS.get(result)
-            except Exception as e:
-                logger.error("[Check status] " + str(e))
-                if settings.DEBUG:
-                    print(e)
-                return None, None
-        else:
-            return None, None
+            print(f"[omni_check_status] Ошибка на попытке {attempt + 1} ID:{id} - {e}")
 
-    except Exception as e:
-        logger.info(f"Ошибка: {e}")
-        send_to_mattermost(f"[omni_check_status] Ошибка: {e}")
-        print(f"[omni_check_status] Ошибка: {e}")
-        return None, None
+            if attempt < max_retries - 1:
+                time.sleep(15)
+            else:
+                return None, None
 
 
 def SendMessageToApprove(acl_id, acl_owner, user, token=""):
@@ -2569,15 +2570,19 @@ def SendMessageToApprove(acl_id, acl_owner, user, token=""):
     </html>
                                     """ % (
         acl_owner,
-        "https://acl.vesta.ru/acl/pending/{}/?token={}".format(acl_id, token),
+        f"https://acl.vesta.ru/acl/pending/{acl_id}/?token={token}",
     )
 
-    e = EmailMessage(subject='Согласование обращения '+str(user.username), body=EMAIL_APPROVE, from_email='acl@alfastrah.ru',
-                     to=[user.email])
+    e = EmailMessage(
+        subject="Согласование обращения " + str(user.username),
+        body=EMAIL_APPROVE,
+        from_email="acl@alfastrah.ru",
+        to=[user.email],
+    )
     e.content_subtype = "html"
     e.send(fail_silently=settings.DEBUG)
     if settings.DEBUG:
-        print("https://acl.vesta.ru/acl/pending/{}/?token={}".format(acl_id, token))
+        print(f"https://acl.vesta.ru/acl/pending/{acl_id}/?token={token}")
 
 
 def send_to_mattermost(*messages):
@@ -2730,8 +2735,8 @@ def convert_md_to_dict(md_content: str):
                 ]:
                     parts = [p.strip() for p in line.split("|")[1:-1]]
                     for part_idx, part in enumerate(parts):
-                        if part == '':
-                            parts[part_idx] = ' '
+                        if part == "":
+                            parts[part_idx] = " "
 
                     if (
                         len(parts) > 0
@@ -2748,8 +2753,9 @@ def convert_md_to_dict(md_content: str):
     except Exception as e:
         logger.error(e)
 
+
 def acl_sending_retry_checking(acl_object):
-    '''Проверяет acl в omnitracker на наличие заявки'''
+    """Проверяет acl в omnitracker на наличие заявки"""
     acl_taskid = acl_object.taskid
     acl_status = acl_object.status
 
@@ -2759,10 +2765,10 @@ def acl_sending_retry_checking(acl_object):
         omni_acl_status, omni_http_status = omni_check_status(omni_taskid)
         if acl_taskid != omni_taskid:
             acl_object.taskid = str(omni_taskid)
-            acl_object.save(update_fields=['taskid'])
+            acl_object.save(update_fields=["taskid"])
         if acl_status != omni_acl_status and omni_acl_status in ["CMP", "JOB", "CNL"]:
             acl_object.status = omni_acl_status
-            acl_object.save(update_fields=['status'])
+            acl_object.save(update_fields=["status"])
         return omni_taskid
     else:
         return None
@@ -2771,30 +2777,23 @@ def acl_sending_retry_checking(acl_object):
 def check_taskId_by_uuid(uuid, proxy=None):
     """Функция проверяет номер SD по номеру UUID в omnitracker"""
 
-    body = """<?xml version="1.0" encoding="utf-8"?>
+    body = f"""<?xml version="1.0" encoding="utf-8"?>
     <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.omninet.de/OtWebSvc/v1">
       <soap:Body>
         <tns:InvokeScript>
           <tns:Script name="OmniAPI" runAt="Server">
             <tns:Parameters>
               <tns:StringVal name="strFunction">GetIncInfoByExternalNumber</tns:StringVal>
-              <tns:StringVal name="strExternalNumber">{}</tns:StringVal>
+              <tns:StringVal name="strExternalNumber">{str(uuid)}</tns:StringVal>
             </tns:Parameters>
           </tns:Script>
         </tns:InvokeScript>
       </soap:Body>
     </soap:Envelope>
-    """.format(
-        str(uuid)
-    ).encode(
-        "utf-8"
-    )
+    """.encode()
     try:
         auth = HttpNtlmAuth(
-            "{}\\{}".format(
-                settings.LDAP_AUTH_CONNECTION_DOMAIN,
-                settings.LDAP_AUTH_CONNECTION_USERNAME,
-            ),
+            f"{settings.LDAP_AUTH_CONNECTION_DOMAIN}\\{settings.LDAP_AUTH_CONNECTION_USERNAME}",
             settings.LDAP_AUTH_CONNECTION_PASSWORD,
         )
     except Exception as e:
@@ -2900,31 +2899,33 @@ def get_project_desc_from_git(session=None, project_id=""):
 
 
 def celery_send_omnitracker(sender, title, text, attach, uuid=None):
-    bodyNotEncoded = """<?xml version="1.0" encoding="utf-8"?>
+    bodyNotEncoded = f"""<?xml version="1.0" encoding="utf-8"?>
                 <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.omninet.de/OtWebSvc/v1">
         <soap:Body>
             <tns:InvokeScript>
                <tns:Script name="OmniAPI" runAt="Server">
                     <tns:Parameters>
                         <tns:StringVal name='strFunction'>CreateIncidentFromTemplateWithAttachmentAndExternalNumber</tns:StringVal>
-                        <tns:StringVal name='strEMail'>{}</tns:StringVal>
-                        <tns:StringVal name='strTitle'>{}</tns:StringVal>
-                        <tns:StringVal name='strDescription'>{}</tns:StringVal>
+                        <tns:StringVal name='strEMail'>{sender}</tns:StringVal>
+                        <tns:StringVal name='strTitle'>{title}</tns:StringVal>
+                        <tns:StringVal name='strDescription'>{text}</tns:StringVal>
                         <tns:StringVal name='strTemplateCode'>SH0458</tns:StringVal>
-                        <tns:StringVal name='strExternalNumber'>{}</tns:StringVal>
-                        <tns:StringVal name='strAttachmentPath'>{}</tns:StringVal>
+                        <tns:StringVal name='strExternalNumber'>{str(uuid)}</tns:StringVal>
+                        <tns:StringVal name='strAttachmentPath'>{attach}</tns:StringVal>
                     </tns:Parameters>
                 </tns:Script>
             </tns:InvokeScript>
         </soap:Body>
         </soap:Envelope>
-        """.format(sender, title, text, str(uuid), attach)
+        """
 
     body = bodyNotEncoded.encode("utf-8")
 
     try:
-        auth = HttpNtlmAuth("{}\\{}".format(settings.LDAP_AUTH_CONNECTION_DOMAIN, settings.LDAP_AUTH_CONNECTION_USERNAME),
-                            settings.LDAP_AUTH_CONNECTION_PASSWORD)
+        auth = HttpNtlmAuth(
+            f"{settings.LDAP_AUTH_CONNECTION_DOMAIN}\\{settings.LDAP_AUTH_CONNECTION_USERNAME}",
+            settings.LDAP_AUTH_CONNECTION_PASSWORD,
+        )
     except Exception as e:
         print(f"Ошибка авторизации LDAP: {e}")
     result = None
@@ -2932,19 +2933,22 @@ def celery_send_omnitracker(sender, title, text, attach, uuid=None):
     for i in range(settings.ATTEMPS):
         try:
             if settings.DEBUG:
-                res = mock_send_omnitracker_200(taskid="888888",
-                                                omnitracker_url=settings.OMNITRACKER_URL,
-                                                body=body,
-                                                headers=OMNI_HTTP_HEADERS,
-                                                timeout=settings.TIMEOUT,
-                                                auth=auth)
+                res = mock_send_omnitracker_200(
+                    taskid="888888",
+                    omnitracker_url=settings.OMNITRACKER_URL,
+                    body=body,
+                    headers=OMNI_HTTP_HEADERS,
+                    timeout=settings.TIMEOUT,
+                    auth=auth,
+                )
             else:
-                res = requests.post(settings.OMNITRACKER_URL,
-                                    body,
-                                    headers=OMNI_HTTP_HEADERS,
-                                    timeout=settings.TIMEOUT,
-                                    auth=auth,
-                                    )
+                res = requests.post(
+                    settings.OMNITRACKER_URL,
+                    body,
+                    headers=OMNI_HTTP_HEADERS,
+                    timeout=settings.TIMEOUT,
+                    auth=auth,
+                )
 
             if res and res.status_code == 200:
                 result = res.text
@@ -2967,9 +2971,10 @@ def celery_send_omnitracker(sender, title, text, attach, uuid=None):
             else:
                 if res.status_code == 401 and not auth:
                     try:
-                        auth = HttpNtlmAuth(f"{settings.LDAP_AUTH_CONNECTION_DOMAIN}\\{settings.LDAP_AUTH_CONNECTION_USERNAME}",
-                                            settings.LDAP_AUTH_CONNECTION_PASSWORD,
-                                            )
+                        auth = HttpNtlmAuth(
+                            f"{settings.LDAP_AUTH_CONNECTION_DOMAIN}\\{settings.LDAP_AUTH_CONNECTION_USERNAME}",
+                            settings.LDAP_AUTH_CONNECTION_PASSWORD,
+                        )
                     except Exception as e:
                         send_to_mattermost(f"Ошибка авторизации LDAP: {e}")
                 if i >= settings.ATTEMPS:
@@ -3001,7 +3006,8 @@ def celery_send_omnitracker(sender, title, text, attach, uuid=None):
 
 
 def check_acl_in_omni(acl_object):
-    """ Проверяет acl в omnitracker на наличие заявки """
+    """Проверяет acl в omnitracker на наличие заявки"""
+
     acl_taskid = acl_object.taskid
     if acl_taskid:
         acl_status = acl_object.status


==== File: tests/__init__.py ====


==== File: tests/mocks/__init__.py ====


