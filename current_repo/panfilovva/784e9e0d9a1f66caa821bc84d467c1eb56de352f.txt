==== File: accesslist/views.py ====
@@ -46,11 +46,11 @@ from ownerlist.utils import (
     BaseView,
     ClearSessionMeta,
     GitWorker,
-    MakeMarkDown,
+    create_markdown_file,
     MakeTemporaryToken,
     ParseDocx,
     SendMessageToApprove,
-    UpdateCallBackStatus,
+    update_callback_status,
     acl_sending_retry_checking,
     convert_md_to_dict,
     get_acl_from_gitlab,
@@ -1079,7 +1079,7 @@ def upload_acl_from_git(request):
 def send_acl_to_git(request, acl_object):
     try:
         file_md = (
-            MakeMarkDown(
+                create_markdown_file(
                 request,
                 json_data=json.loads(acl_object.acltext),
                 filename=f"acl_{acl_object.id}",
@@ -1431,10 +1431,10 @@ def task(request, acl_id) -> bool:
     result_id = None
     doc_ready = False
     if "ACT_MAKE_GIT" in request.session:
-        UpdateCallBackStatus(request, acl_id, "git_upload_status", "Генерация md файла")
+        update_callback_status(request, acl_id, "git_upload_status", "Генерация md файла")
 
     if "ACT_MAKE_DOCX" in request.session:
-        UpdateCallBackStatus(
+        update_callback_status(
             request, acl_id, "docx_download_status", "Генерация docx файла"
         )
     try:
@@ -1462,7 +1462,7 @@ def task(request, acl_id) -> bool:
         send_to_mattermost(
             f"[Отправка в omni]. |acl_id:{acl_id}| Произошла ошибка при создании docx файла: {e}"
         )
-        UpdateCallBackStatus(
+        update_callback_status(
             request,
             acl_id,
             "docx_download_status",
@@ -1480,7 +1480,7 @@ def task(request, acl_id) -> bool:
                 logger.info(
                     "Файл docx успешно сформирован. ACT_MAKE_DOCX удалён из сессии."
                 )
-                UpdateCallBackStatus(
+                update_callback_status(
                     request,
                     acl_id,
                     "docx_download_status",
@@ -1520,7 +1520,7 @@ def task(request, acl_id) -> bool:
                         content_type="application/json",
                     )
             if doc_ready:
-                UpdateCallBackStatus(
+                update_callback_status(
                     request,
                     acl_id,
                     "omni_email_status",
@@ -1528,7 +1528,7 @@ def task(request, acl_id) -> bool:
                 )
             else:
                 try:
-                    UpdateCallBackStatus(
+                    update_callback_status(
                         request, acl_id, "omni_email_status", "Генерация docx файла..."
                     )
                     gitlab_filename = obj.git_filename
@@ -1589,7 +1589,7 @@ def task(request, acl_id) -> bool:
                         send_to_mattermost(
                             f'[owner={obj.owner}, Ссылка на ACL: https://acl.vesta.ru/acl/info/{str(obj.id)}] Получен номер SD("{result_id}"). Добавление Номера SD в БД. Проверка записи: obj.taskid={obj.taskid}'
                         )
-                    UpdateCallBackStatus(
+                    update_callback_status(
                         request,
                         acl_id,
                         "omni_email_status",
@@ -1598,7 +1598,7 @@ def task(request, acl_id) -> bool:
                         ),
                         2,
                     )
-                    UpdateCallBackStatus(
+                    update_callback_status(
                         request, acl_id, "omni_track_id", "{}".format(result_id)
                     )
                     if "ACT_OMNI" in request.session:
@@ -1610,7 +1610,7 @@ def task(request, acl_id) -> bool:
                         stack()[0][3], str(e), request.META.get("REMOTE_ADDR")
                     )
                 )
-                UpdateCallBackStatus(
+                update_callback_status(
                     request, acl_id, "omni_email_status", "{}".format(str(e))
                 )
                 sleep(3)  # Ждем callback для уведомления пользователю
@@ -1640,7 +1640,7 @@ def task(request, acl_id) -> bool:
                 # obj.save(update_fields=['taskid', 'status'])
 
         except Exception as e:
-            UpdateCallBackStatus(
+            update_callback_status(
                 request,
                 acl_id,
                 "omni_email_status",
@@ -1654,7 +1654,7 @@ def task(request, acl_id) -> bool:
                 if "ACT_OMNI" in request.session:
                     del request.session["ACT_OMNI"]
                 if result_id is not None and result_id > 0:
-                    UpdateCallBackStatus(
+                    update_callback_status(
                         request,
                         acl_id,
                         "omni_email_status",
@@ -1664,7 +1664,7 @@ def task(request, acl_id) -> bool:
                         2,
                     )
                 else:
-                    UpdateCallBackStatus(
+                    update_callback_status(
                         request,
                         acl_id,
                         "omni_email_status",
@@ -1676,14 +1676,14 @@ def task(request, acl_id) -> bool:
         # UpdateCallBackStatus(request, acl_id, 'git_upload_status', 'Генерация md файла')
         try:
             file_md = (
-                MakeMarkDown(request, local_storage, "acl_{}".format(acl_id), acl_id)
-                or "None"
+                    create_markdown_file(request, local_storage, "acl_{}".format(acl_id), acl_id)
+                    or "None"
             )
             if not file_md:
                 send_to_mattermost(f"Не удалось создать md файл. acl_id:{acl_id}")
                 raise Exception("Ошибка при создании md файла")
 
-            UpdateCallBackStatus(
+            update_callback_status(
                 request,
                 acl_id,
                 "git_upload_file",
@@ -1706,7 +1706,7 @@ def task(request, acl_id) -> bool:
                     BASE_DIR, "static/md/" + "acl_{}".format(str(acl_id)) + ".md"
                 )
                 logger.error("[Формирование md] Ошибка при формировании пути md файла.")
-                UpdateCallBackStatus(
+                update_callback_status(
                     request,
                     acl_id,
                     "git_upload_status",
@@ -1715,7 +1715,7 @@ def task(request, acl_id) -> bool:
                 )
                 # return HttpResponse(json.dumps({'status': cache.get(acl_id, {})}), content_type="application/json")
 
-            UpdateCallBackStatus(
+            update_callback_status(
                 request, acl_id, "git_upload_status", "Отправка запроса в gitlab"
             )
             gitlab_project = obj.project
@@ -1738,14 +1738,14 @@ def task(request, acl_id) -> bool:
                     f = g.activity(gitlab_filename)
                     if f:
                         if g.addindex(f):
-                            UpdateCallBackStatus(
+                            update_callback_status(
                                 request,
                                 acl_id,
                                 "git_upload_status",
                                 "Отправка изменений на сервер",
                             )
                             if g.push(refspec="develop:develop"):
-                                UpdateCallBackStatus(
+                                update_callback_status(
                                     request,
                                     acl_id,
                                     "git_upload_status",
@@ -1765,7 +1765,7 @@ def task(request, acl_id) -> bool:
                 g.free()
         except Exception as e:
             logger.error(f"Ошибка при отправке в git: {e}")
-            UpdateCallBackStatus(
+            update_callback_status(
                 request, acl_id, "git_upload_status", "{}".format(e), 0
             )
             # is_work_done = False
@@ -2010,7 +2010,7 @@ def makeAndDownloadMdAndDocx(request, acl_id):
             elif file_type == "md":
                 logger.info("[MAKE FILE] Создание md файла")
                 filename_without_extension = os.path.splitext(gitlab_filename)[0]
-                file_path = MakeMarkDown(
+                file_path = create_markdown_file(
                     request, local_storage, filename_without_extension, acl_id
                 )
                 logger.info(f"[MAKE FILE] Файл md успешно сформирован:{file_path}")


==== File: ownerlist/utils.py ====
@@ -1056,7 +1056,7 @@ class ExtractDataXls:
             )
 
 
-def UpdateCallBackStatus(request, taskid, name, value, event=1):
+def update_callback_status(request, taskid, name, value, event=1):
     """Функция для создания сообщения callback на запрос статуса потоками"""
     JOB = cache.get(taskid, {})
     if event == 2:
@@ -1174,7 +1174,7 @@ def make_doc(
         fileuuid = str(uuid.uuid4())
 
     if is_in_session:
-        UpdateCallBackStatus(
+        update_callback_status(
             request, fileuuid, "docx_download_status", "Создаем docx файл"
         )
 
@@ -1188,7 +1188,7 @@ def make_doc(
 
     doc = Document(TEMPLATE_FILE)
     if is_in_session:
-        UpdateCallBackStatus(
+        update_callback_status(
             request, fileuuid, "docx_download_status", "Записываем изменения"
         )
 
@@ -1315,7 +1315,7 @@ def make_doc(
             table._element.addnext(p._p)
 
     if is_in_session:
-        UpdateCallBackStatus(
+        update_callback_status(
             request,
             fileuuid,
             "docx_download_status",
@@ -1426,10 +1426,10 @@ def table(records, fields, headings=None, alignment=None, file=None):
         file.write("\n")
 
 
-def MakeMarkDown(request, json_data, filename, fileuuid=""):
-    """Функция записывает JSON как md файл"""
-    print("[MakeMarkDown] Создание md")
-    UpdateCallBackStatus(request, fileuuid, "git_upload_status", "Создание md файла")
+def create_markdown_file(request, json_data, filename, fileuuid=""):
+    """ Создает markdown-файл из JSON-данных """
+    print("[create_markdown_file] Create md")
+    update_callback_status(request, fileuuid, "git_upload_status", "Создание md файла")
 
     try:
         file_path = os.path.join(BASE_DIR, f"static/md/{filename}.md")
@@ -1449,7 +1449,7 @@ def MakeMarkDown(request, json_data, filename, fileuuid=""):
         md_handle_error(filename, fileuuid, e)
         return False
 
-    UpdateCallBackStatus(request, fileuuid, "git_upload_status", "ACL file created")
+    update_callback_status(request, fileuuid, "git_upload_status", "The md file Created")
     return f"/static/md/{filename}.md"
 
 
@@ -1458,82 +1458,82 @@ def md_write_acl_create_info(file, data):
     print("[MakeMarkDown] acl_create_info")
     file.write("## {}\n".format(data[4]))
     file.write("##### Описание доступа к ресурсам\n")
-    tmp = zip(contact_table, data)
-    fields = [0, 1]
-    table(
-        records=tmp,
-        fields=fields,
-        headings=contact_column,
-        alignment=[("<", "<"), ("<", "<")],
-        file=file,
-    )
+
+    if data:
+        fields = [0, 1]
+        tmp = zip(contact_table, data)
+        table(
+            records=tmp,
+            fields=fields,
+            headings=contact_column,
+            alignment=[("<", "<")] * len(contact_column),
+            file=file,
+        )
 
 
 def md_write_acl_internal_resources(file, data):
-    logger.debug("[MakeMarkDown] acl_internal_resources")
-    print("[MakeMarkDown] acl_internal_resources")
+    logger.debug("[write_acl_internal_resources_to_markdown] Запись внутренних ресурсов")
+    print("[write_acl_internal_resources_to_markdown] Запись внутренних ресурсов")
+
     file.write("\n##### Список внутренних ресурсов (СГ АльфаСтрахование)\n")
-    fields = [0, 1, 2]
-    table(
-        records=data,
-        fields=fields,
-        headings=standart_column,
-        alignment=[("<", "<"), ("^", "^"), ("<", "<")],
-        file=file,
-    )
+
+    if data:
+        table(
+            records=data,
+            fields=list(range(len(data[0])) if data else []),
+            headings=standart_column,
+            alignment=[("<", "<")] * len(standart_column),
+            file=file,
+        )
 
 
 def md_write_acl_dmz_resources(file, data):
-    logger.debug("[MakeMarkDown] acl_dmz_resources")
-    print("[MakeMarkDown] acl_dmz_resources")
+    logger.debug("[write_acl_dmz_resources_to_markdown] Запись DMZ ресурсов")
+    print("[write_acl_dmz_resources_to_markdown] Запись DMZ ресурсов")
+
     file.write("\n##### Список DMZ ресурсов (СГ АльфаСтрахование)\n")
-    fields = [0, 1, 2]
-    table(
-        records=data,
-        fields=fields,
-        headings=standart_column,
-        alignment=[("<", "<"), ("^", "^"), ("<", "<")],
-        file=file,
-    )
+
+    if data:
+        table(
+            records=data,
+            fields=list(range(len(data[0])) if data else []),
+            headings=standart_column,
+            alignment=[("<", "<")] * len(standart_column),
+            file=file,
+        )
 
 
 def md_write_acl_external_resources(file, data):
-    logger.debug("[MakeMarkDown] acl_external_resources")
-    print("[MakeMarkDown] acl_external_resources")
+    logger.debug("[write_acl_external_resources_to_markdown] Запись внешних ресурсов")
+    print("[write_acl_external_resources_to_markdown] Запись внешних ресурсов")
+
     file.write("\n##### Список внешних ресурсов (Internet)\n")
-    fields = [0, 1, 2, 3]
-    table(
-        records=data,
-        fields=fields,
-        headings=external_column,
-        alignment=[("<", "<"), ("<", "<"), ("^", "^"), ("<", "<")],
-        file=file,
-    )
+
+    if data:
+        table(
+            records=data,
+            fields=list(range(len(data[0])) if data else []),
+            headings=external_column,
+            alignment=[("<", "<")] * len(external_column),
+            file=file,
+        )
 
 
 def md_write_acl_traffic(file, data):
-    logger.debug("[MakeMarkDown] acl_traffic")
-    print("[MakeMarkDown] acl_traffic")
+    logger.debug("[write_acl_traffic_to_markdown] Запись потоков трафика")
+    print("[write_acl_traffic_to_markdown] Запись потоков трафика")
+
     file.write("\n##### Потоки трафика\n")
-    fields = [0, 1, 2, 3, 4, 5, 6, 7]
+
     if data:
-        for item in data:
-            if len(item) < len(fields):
-                item.extend([" "] * (len(fields) - len(item)))
+        max_length = max(len(item) for item in data)
+        data = [item + [" "] * (max_length - len(item)) for item in data]
+
         table(
             records=data,
-            fields=fields,
+            fields=list(range(max_length)),
             headings=traffic_column,
-            alignment=[
-                ("<", "<"),
-                ("<", "<"),
-                ("<", "<"),
-                ("<", "<"),
-                ("<", "<"),
-                ("<", "<"),
-                ("<", "<"),
-                ("<", "<"),
-            ],
+            alignment=[("<", "<")] * max_length,
             file=file,
         )
 
@@ -1573,7 +1573,7 @@ class GitWorker:
                     PATH_OF_GIT_REPO, bare=True
                 )  # PATH_OF_GIT_REPO
             except:
-                UpdateCallBackStatus(
+                update_callback_status(
                     request,
                     taskid,
                     "git_upload_status",
@@ -1593,7 +1593,7 @@ class GitWorker:
                 )  # uid, bare=True os.path.join(tempfile.gettempdir(), uid)
                 print(f"Инициализирован новый репозиторий:{self.repo}")
             except:
-                UpdateCallBackStatus(
+                update_callback_status(
                     request,
                     taskid,
                     "git_upload_status",
@@ -1610,7 +1610,7 @@ class GitWorker:
 
         self.request = request
         self.taskid = taskid
-        UpdateCallBackStatus(
+        update_callback_status(
             request, taskid, "git_upload_status", "Инициализация Git проекта"
         )
 
@@ -1646,7 +1646,7 @@ class GitWorker:
 
         if not os.path.exists(self.PATH_OF_GIT_REPO):
             os.makedirs(self.PATH_OF_GIT_REPO)
-            UpdateCallBackStatus(
+            update_callback_status(
                 request, taskid, "git_upload_status", "Создание временой папки"
             )
             # self.request.session['git_upload_status'].append({'status': "Создание временой папки: {}".format(self.PATH_OF_GIT_REPO)})
@@ -1676,7 +1676,7 @@ class GitWorker:
         try:
             # if settings.DEBUG:
             #     logger.debug('Копируем репозиторий: {} ->{} '.format(self.GITPRO, self.PATH_OF_GIT_REPO))
-            UpdateCallBackStatus(
+            update_callback_status(
                 self.request,
                 self.taskid,
                 "git_upload_status",
@@ -1686,7 +1686,7 @@ class GitWorker:
         except Exception as e:
             if e.status == 128:
                 # self.request.session['git_upload_status'].append({'error': "Нет доступа к GIT репозиторию"})
-                UpdateCallBackStatus(
+                update_callback_status(
                     self.request,
                     self.taskid,
                     "git_upload_status",
@@ -1695,7 +1695,7 @@ class GitWorker:
                 )
             else:
                 # self.request.session['git_upload_status'].append({'error': "[Ошибка] {}".format(e)})
-                UpdateCallBackStatus(
+                update_callback_status(
                     self.request,
                     self.taskid,
                     "git_upload_status",
@@ -1708,7 +1708,7 @@ class GitWorker:
 
         if len(self.repo.index.entries) == 0:
             # self.request.session['git_upload_status'].append({'error': "Не удалось скачать файлы проекта, папка пустая"})
-            UpdateCallBackStatus(
+            update_callback_status(
                 self.request,
                 self.taskid,
                 "git_upload_status",
@@ -1719,7 +1719,7 @@ class GitWorker:
                 logger.debug("Не удалось скачать файлы проекта, папка пустая")
             return 0
         # self.request.session['git_upload_status'].append({'status': "Скачано: {} файлов".format(len(self.repo.index.entries))})
-        UpdateCallBackStatus(
+        update_callback_status(
             self.request,
             self.taskid,
             "git_upload_status",
@@ -1744,7 +1744,7 @@ class GitWorker:
             logger.info("git pull выполнен")
         except Exception as e:
             if e.status == 128:
-                UpdateCallBackStatus(
+                update_callback_status(
                     self.request,
                     self.taskid,
                     "git_upload_status",
@@ -1752,7 +1752,7 @@ class GitWorker:
                     0,
                 )
             else:
-                UpdateCallBackStatus(
+                update_callback_status(
                     self.request,
                     self.taskid,
                     "git_upload_status",
@@ -1766,7 +1766,7 @@ class GitWorker:
             sfile = self.MDFILE
             dfile = os.path.join(self.PATH_OF_GIT_REPO, git_filename)
             if not copyfile(sfile, dfile):
-                UpdateCallBackStatus(
+                update_callback_status(
                     self.request,
                     self.taskid,
                     "git_upload_status",
@@ -1781,7 +1781,7 @@ class GitWorker:
                         )
                     )
                 return 0
-            UpdateCallBackStatus(
+            update_callback_status(
                 self.request,
                 self.taskid,
                 "git_upload_status",
@@ -1792,7 +1792,7 @@ class GitWorker:
                 logger.debug("Копирование файла в проект: {}".format(dfile))
         except Exception:
             # self.request.session['git_upload_status'].append({'error': "Возникла ошибка при копировании md файла в папку проекта"})
-            UpdateCallBackStatus(
+            update_callback_status(
                 self.request,
                 self.taskid,
                 "git_upload_status",
@@ -1816,7 +1816,7 @@ class GitWorker:
             index.commit(
                 f"{COMMIT_MESSAGE} {os.path.basename(clear_filename)} by {username}"
             )
-            UpdateCallBackStatus(
+            update_callback_status(
                 self.request,
                 self.taskid,
                 "git_upload_status",
@@ -1825,7 +1825,7 @@ class GitWorker:
             if settings.DEBUG:
                 logger.debug("Локальный коммит изменений")
         except Exception as e:
-            UpdateCallBackStatus(
+            update_callback_status(
                 self.request,
                 self.taskid,
                 "git_upload_status",
@@ -1848,7 +1848,7 @@ class GitWorker:
                             "Репозиторий не существует или нет доступа к нему"
                         )
                         print(error_message)
-                        UpdateCallBackStatus(
+                        update_callback_status(
                             self.request,
                             self.taskid,
                             "git_upload_status",
@@ -1863,7 +1863,7 @@ class GitWorker:
             else:
                 error_message = f"Ветка {refspec.split(':')[0]} не существует"
                 print(error_message)
-                UpdateCallBackStatus(
+                update_callback_status(
                     self.request, self.taskid, "git_upload_status", error_message, 0
                 )
                 return False
@@ -1873,7 +1873,7 @@ class GitWorker:
             result = self.repo.remotes.origin.push(refspec=refspec, force=True)
             if result:
                 print(f"Файл acl успешно загружен в репозиторий:{result}")
-                UpdateCallBackStatus(
+                update_callback_status(
                     self.request,
                     self.taskid,
                     "git_upload_status",
@@ -1884,7 +1884,7 @@ class GitWorker:
             if e.status == 128:
                 error_message = "Ошибка аутентификации для данного репозитория"
                 print(error_message)
-                UpdateCallBackStatus(
+                update_callback_status(
                     self.request, self.taskid, "git_upload_status", error_message, 0
                 )
                 send_to_mattermost(
@@ -1893,7 +1893,7 @@ class GitWorker:
             else:
                 error_message = "Ошибка при отправке коммита на сервер"
                 print(error_message)
-                UpdateCallBackStatus(
+                update_callback_status(
                     self.request, self.taskid, "git_upload_status", error_message, 0
                 )
                 send_to_mattermost(
@@ -2338,7 +2338,7 @@ def send_onmitracker(
                         if len(result) > 1:
                             result = result[1].split("</")[0]
                         else:
-                            UpdateCallBackStatus(
+                            update_callback_status(
                                 request,
                                 uid,
                                 "omni_email_status",
@@ -2377,7 +2377,7 @@ def send_onmitracker(
                         logger.error("Нужный модуль requests_ntlm не загружен :-(")
                 if i >= settings.ATTEMPS:
                     break
-                UpdateCallBackStatus(
+                update_callback_status(
                     request,
                     uid,
                     "omni_email_status",
@@ -2398,7 +2398,7 @@ def send_onmitracker(
                     settings.OMNITRACKER_URL
                 )
             )
-            UpdateCallBackStatus(
+            update_callback_status(
                 request,
                 uid,
                 "omni_email_status",
@@ -2416,7 +2416,7 @@ def send_onmitracker(
             logger.error(
                 "[TRACE] Сервис {} не отвечает".format(settings.OMNITRACKER_URL)
             )
-            UpdateCallBackStatus(
+            update_callback_status(
                 request,
                 uid,
                 "omni_email_status",
@@ -2431,7 +2431,7 @@ def send_onmitracker(
                 f"OMNITRACKER_URL: {settings.OMNITRACKER_URL}",
                 f"Ссылка на ACL: https://acl.vesta.ru/acl/info/ {str(uid)}",
             )
-            UpdateCallBackStatus(
+            update_callback_status(
                 request,
                 uid,
                 "omni_email_status",


