==== File: ownerlist/utils.py ====
@@ -38,6 +38,10 @@ from docx import Document, opc
 from docx.enum.text import WD_COLOR_INDEX
 from docx.shared import Pt, RGBColor
 
+from tests.mocks.mock_omni_check_status import mock_omni_check_status_200
+from tests.mocks.mock_send_omnitracker import mock_send_omnitracker_200
+
+
 try:
     from requests_ntlm import HttpNtlmAuth
 except ImportError:
@@ -2329,13 +2333,23 @@ def send_onmitracker(
             # time.sleep(5)
             logger.debug(f"[{i}] Отправка запроса в {settings.OMNITRACKER_URL}")
             logger.debug("[TRACE] Тело запроса: " + body.decode())
-            res = requests.post(
-                settings.OMNITRACKER_URL,
-                body,
-                headers=OMNI_HTTP_HEADERS,
-                timeout=settings.TIMEOUT,
-                auth=auth,
-            )
+            if settings.DEBUG:
+                res = mock_send_omnitracker_200(
+                                                taskid="777777",
+                                                omnitracker_url=settings.OMNITRACKER_URL,
+                                                body=body,
+                                                headers=OMNI_HTTP_HEADERS,
+                                                timeout=settings.TIMEOUT,
+                                                auth=auth
+                                                )
+            else:
+                res = requests.post(
+                    settings.OMNITRACKER_URL,
+                    body,
+                    headers=OMNI_HTTP_HEADERS,
+                    timeout=settings.TIMEOUT,
+                    auth=auth,
+                )
             if i == 2:
                 send_to_mattermost(
                     f"Попытка подключения номер: {i}.",
@@ -2483,8 +2497,16 @@ def omni_check_status(id=None, proxy=None):
         logger.error(f"Ошибка авторизации LDAP: {e}")
         print(f"Ошибка авторизации LDAP: {e}")
 
-    for attempt in range(max_retries):
-        try:
+    try:
+        if settings.DEBUG:
+            r = mock_omni_check_status_200(acl_status="Assigned",
+                                           omnitracker_url=settings.OMNITRACKER_URL,
+                                           body=body,
+                                           headers=OMNI_HTTP_HEADERS,
+                                           proxies=proxy,
+                                           auth=auth,
+                                           timeout=1)
+        else:
             r = requests.post(
                 settings.OMNITRACKER_URL,
                 body,
@@ -2493,19 +2515,17 @@ def omni_check_status(id=None, proxy=None):
                 auth=auth,
                 timeout=1,
             )
-            if r.status_code == 200:
-                try:
-                    result = r.text
-                    if result and len(result) > 3:
-                        result = result.split('strResponse">')
-                        result = result[1].split("</")[0]
-                    return OMNI_ACL_STATUS.get(result), OMNI_HTTP_STATUS.get(result)
-                except Exception as e:
-                    logger.error("[Check status] " + str(e))
-                    if settings.DEBUG:
-                        print(e)
-                    return None, None
-            else:
+        if r.status_code == 200:
+            try:
+                result = r.text
+                if result and len(result) > 3:
+                    result = result.split('strResponse">')
+                    result = result[1].split("</")[0]
+                return OMNI_ACL_STATUS.get(result), OMNI_HTTP_STATUS.get(result)
+            except Exception as e:
+                logger.error("[Check status] " + str(e))
+                if settings.DEBUG:
+                    print(e)
                 return None, None
 
         except Exception as e:
@@ -2566,8 +2586,9 @@ def SendMessageToApprove(acl_id, acl_owner, user, token=""):
 def send_to_mattermost(*messages):
     try:
         text = ""
-
         for message in messages:
+            if settings.DEBUG:
+                text += "[ACL DEBUG] "
             text += f"{message}\n"
 
         payload = {"text": text}
@@ -2909,13 +2930,20 @@ def celery_send_omnitracker(sender, title, text, attach, uuid=None):
 
     for i in range(settings.ATTEMPS):
         try:
-            res = requests.post(
-                settings.OMNITRACKER_URL,
-                body,
-                headers=OMNI_HTTP_HEADERS,
-                timeout=settings.TIMEOUT,
-                auth=auth,
-            )
+            if settings.DEBUG:
+                res = mock_send_omnitracker_200(taskid="888888",
+                                                omnitracker_url=settings.OMNITRACKER_URL,
+                                                body=body,
+                                                headers=OMNI_HTTP_HEADERS,
+                                                timeout=settings.TIMEOUT,
+                                                auth=auth)
+            else:
+                res = requests.post(settings.OMNITRACKER_URL,
+                                    body,
+                                    headers=OMNI_HTTP_HEADERS,
+                                    timeout=settings.TIMEOUT,
+                                    auth=auth,
+                                    )
 
             if res and res.status_code == 200:
                 result = res.text


==== File: tests/mocks/mock_omni_check_status.py ====
@@ -0,0 +1,71 @@
+from tests.mocks.mock_requests import mock_request_200
+
+
+
+def mock_omni_check_status_200(acl_status: str = "inProgress",
+                               omnitracker_url: str = None,
+                               body: str = None,
+                               headers: str = None,
+                               proxies = None,
+                               timeout: int = None,
+                               auth = None
+                              ):
+    """
+    OMNI_ACL_STATUS = {
+        "inProgress": "JOB",
+        "Done": "CMP",
+        "Closed": "CMP",
+        "Assigned": "JOB",
+        "Registered": "JOB",
+        "RejectedByUser ": "CNL",
+        "": "UNK",
+    }
+    OMNI_HTTP_STATUS = {
+        "inProgress": "В работе",
+        "Done": "Выполнено",
+        "Closed": "Закрыто",
+        "Assigned": "На исполнении",
+        "Registered": "Новое",
+        "RejectedByUser ": "Отклолено",
+        "UNK": "Статус не известен",
+        "": "Статус не известен",
+    }
+    """
+    request_info = {
+        "omnitracker_url":omnitracker_url,
+        "body":body,
+        "headers":headers,
+        'proxies':proxies,
+        "timeout":timeout,
+        "auth":auth
+    }
+    mock_response = mock_request_200()
+    mock_response.info = request_info
+    mock_response.text = f'strResponse">{acl_status}</'
+    return mock_response
+
+
+def mock_omni_check_status_401(omnitracker_url: str = None,
+                               body: str = None,
+                               headers: str = None,
+                               proxies = None,
+                               timeout: int = None,
+                               auth = None
+                              ):
+    request_info = {
+        "omnitracker_url": omnitracker_url,
+        "body": body,
+        "headers": headers,
+        "proxies": proxies,
+        "timeout": timeout,
+        "auth": auth
+    }
+
+    mock_response = mock_request_200()
+    mock_response.info = request_info
+    return mock_response
+
+
+if __name__ == '__main__':
+    result = mock_omni_check_status_200()
+    print(result.text)


==== File: tests/mocks/mock_requests.py ====
@@ -0,0 +1,19 @@
+from unittest.mock import Mock
+
+
+def mock_request(status_code=200, text='Mock response'):
+    mock_response = Mock()
+    mock_response.status_code = status_code
+    mock_response.text = text
+    return mock_response
+
+
+def mock_request_200():
+    return mock_request(status_code=200, text='Mock response')
+
+
+def mock_request_401():
+    return mock_request(status_code=401, text='Mock error')
+
+
+


==== File: tests/mocks/mock_send_omnitracker.py ====
@@ -0,0 +1,41 @@
+from tests.mocks.mock_requests import mock_request_200
+
+
+def mock_send_omnitracker_200(taskid: str = '111111',
+                              omnitracker_url: str = None,
+                              body: str = None,
+                              headers: str = None,
+                              timeout: int = None,
+                              auth=None
+                              ):
+    request_info = {
+        "omnitracker_url": omnitracker_url,
+        "body": body,
+        "headers": headers,
+        "timeout": timeout,
+        "auth": auth
+    }
+
+    mock_response = mock_request_200()
+    mock_response.text = taskid
+    mock_response.info = request_info
+    return mock_response
+
+
+def mock_send_omnitracker_401(omnitracker_url: str = None,
+                              body: str =None,
+                              headers: str = None,
+                              timeout: int = None,
+                              auth = None
+                              ):
+    request_info = {
+        "omnitracker_url": omnitracker_url,
+        "body": body,
+        "headers": headers,
+        "timeout": timeout,
+        "auth": auth
+    }
+
+    mock_response = mock_request_200()
+    mock_response.info = request_info
+    return mock_response
\ No newline at end of file


