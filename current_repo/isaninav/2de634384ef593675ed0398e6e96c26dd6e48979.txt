==== File: accesslist/models.py ====
@@ -33,6 +33,7 @@ class ACL(models.Model):
     ]
     status = models.CharField(choices=APL_STATUS, default='NOTFL', blank=True, max_length=20)
     team = models.ForeignKey(Team, null=True, on_delete=models.SET_NULL, editable=True)
+    git_filename = models.CharField(blank=True, default="", editable=True, max_length=256)
 
     def save(self, *args, **kwargs):
         if self.token is None or self.token == '':


==== File: accesslist/views.py ====
@@ -120,8 +120,8 @@ class ObjectMixin:
                     for ACT in activity:
                         if '.git' not in ACT:
                             request.session[ACT] = True
-                        else:
-                            request.session['GIT_URL'] = ACT
+                        # else:
+                        #     request.session['GIT_URL'] = ACT
 
             if 'LOCAL_STORAGE' in request.session:
                 context.update({'acl_id': str(acl_id),
@@ -485,11 +485,11 @@ def save__form(request, owner_form: None, acl_id)->None:
             if 'ACT_MAKE_GIT' in request.session:
                 activity.append('ACT_MAKE_GIT')
 
-            if 'GIT_URL' in request.session:
-                    activity.append(request.session['GIT_URL'])
+            # if 'GIT_URL' in request.session:
+            #         activity.append(request.session['GIT_URL'])
 
-            if 'GIT_FILENAME' in request.session:
-                activity.append(request.session['GIT_FILENAME'])
+            # if 'GIT_FILENAME' in request.session:
+            #     activity.append(request.session['GIT_FILENAME'])
 
             if 'ACT_MAKE_DOCX' in request.session:
                 activity.append('ACT_MAKE_DOCX')
@@ -559,6 +559,7 @@ def save__form(request, owner_form: None, acl_id)->None:
             if len(activity) > 0:
                 obj.activity = ";".join(activity)
             obj.project = owner_form[4]
+            obj.git_filename = owner_form[9]
             obj.save()
 
     except Exception as e:
@@ -736,18 +737,18 @@ def Gitcheck(request):
             if request.POST.get('git_url', '') == '':
                 if 'ACT_MAKE_GIT' in request.session:
                     del request.session['ACT_MAKE_GIT']
-                if 'GIT_URL' in request.session:
-                    del request.session['GIT_URL']
-                if 'GIT_FILENAME' in request.session:
-                    del request.session['GIT_FILENAME']
+                # if 'GIT_URL' in request.session:
+                #     del request.session['GIT_URL']
+                # if 'GIT_FILENAME' in request.session:
+                #     del request.session['GIT_FILENAME']
                 result = {'error': 'Git проект не может быть пустым'}
-            elif not re.match('^(https:\/\/git)?(.)+(.git)$',request.POST.get('git_url', '')):
-               result = {'error': 'Не валидные данные'}
-            elif request.POST.get('git_file') == "" or request.POST.get('git_file') == "Нет":
-                result = {'error': 'Имя файла не найдено'}
-            else:
-                request.session['GIT_URL'] = request.POST.get('git_url')
-                request.session['GIT_FILENAME'] = request.POST.get('git_file')
+            # elif not re.match('^(https:\/\/git)?(.)+(.git)$',request.POST.get('git_url', '')):
+            #    result = {'error': 'Не валидные данные'}
+            # elif request.POST.get('git_file') == "" or request.POST.get('git_file') == "Нет":
+            #     result = {'error': 'Имя файла не найдено'}
+            # else:
+                # request.session['GIT_URL'] = request.POST.get('git_url')
+                # request.session['GIT_FILENAME'] = request.POST.get('git_file')
 
         return HttpResponse(json.dumps(result), content_type="application/json")
     return HttpResponse(status=405)
@@ -768,6 +769,7 @@ def upload_acl_from_git(request):
         gitlab_project = request.POST.get('project')
         gitlab_repo_url = ACLGitlabStore.objects.get(project=gitlab_project).gitlab_url
         gitlab_file_name = request.POST.get('gitlab_file_selected_option')
+
         if not re.match('^(https:\/\/git)?(.)+(.git)$', gitlab_repo_url):
             result = {'error': 'Ошибка: Невалидный gitlab url.'}
 
@@ -818,8 +820,9 @@ def check_taskid_and_status(request, *args, **kwargs):
                                 send_to_mattermost(f"[acl_pusher] [Перехвачен Дубль обращения] ACL уже назначен Номер SD:{aclObject.taskid}; Ссылка на ACL :https://acl.vesta.ru/acl/info/{str(aclObject.id)}")
                                 continue
                             try:
-                                gitlab_repo_url = request.session['GIT_URL']
-                                gitlab_filename = request.session['GIT_FILENAME']
+                                gitlab_filename = aclObject.git_filename
+                                gitlab_project = aclObject.project
+                                gitlab_repo_url = ACLGitlabStore.objects.get(project=gitlab_project).gitlab_url
                                 doc_result = make_doc(request, json.loads(aclObject.acltext), acl_id, gitlab_repo_url=gitlab_repo_url, gitlab_filename=gitlab_filename)
                             except Exception as e:
                                 logger.error(f'Ошибка при создании docx: {e}')
@@ -828,7 +831,7 @@ def check_taskid_and_status(request, *args, **kwargs):
                                 if settings.OMNITRACKER_URL:
                                     try:
                                         docx_url = f"{request.get_host()}/{doc_result[1:]}"
-                                        logger.error('URL ОТПРАВКИ В OMNI' + str(docx_url))
+                                        logger.debug('URL ОТПРАВКИ В OMNI ' + str(docx_url))
 
                                         if '://' not in docx_url:
                                             docx_url = 'https://' + docx_url
@@ -942,8 +945,9 @@ def task(request, acl_id)->bool:
     if 'ACT_MAKE_DOCX' in request.session:
         UpdateCallBackStatus(request, acl_id, 'docx_download_status', 'Генерация docx файла')
     try:
-        gitlab_repo_url = request.session['GIT_URL']
-        gitlab_filename = request.session['GIT_FILENAME']
+        gitlab_filename = obj.git_filename
+        gitlab_project = obj.project
+        gitlab_repo_url = ACLGitlabStore.objects.get(project=gitlab_project).gitlab_url
         doc_result = make_doc(request, request.session['LOCAL_STORAGE'], gitlab_repo_url=gitlab_repo_url, gitlab_filename=gitlab_filename)
         doc_ready= True
     except Exception as e:
@@ -964,7 +968,7 @@ def task(request, acl_id)->bool:
             is_work_omni = True
             omni_job = cache.get(acl_id, {})
             if settings.DEBUG:
-                logger.error("OMNI CACHE STATUS: {}".format(omni_job))
+                logger.debug("OMNI CACHE STATUS: {}".format(omni_job))
 
             if omni_job.keys().__len__() > 0 or (obj.status == 'JOB' and len(obj.taskid) >= 3):
                 if 'omni_email_status' in omni_job:  # or obj.taskid == 'PRO':
@@ -978,8 +982,9 @@ def task(request, acl_id)->bool:
                 try:
                     UpdateCallBackStatus(request, acl_id, 'omni_email_status', 'Генерация docx файла...')
                     logger.info(f"При создании файла: {request.session['LOCAL_STORAGE']}")
-                    gitlab_repo_url = request.session['GIT_URL']
-                    gitlab_filename = request.session['GIT_FILENAME']
+                    gitlab_filename = obj.git_filename
+                    gitlab_project = obj.project
+                    gitlab_repo_url = ACLGitlabStore.objects.get(project=gitlab_project).gitlab_url
                     doc_result = make_doc(request, request.session['LOCAL_STORAGE'], acl_id, gitlab_repo_url=gitlab_repo_url, gitlab_filename=gitlab_filename)
                     doc_ready = True
                 except Exception as e:
@@ -989,7 +994,7 @@ def task(request, acl_id)->bool:
                 if settings.OMNITRACKER_URL:
                     try:
                         docx_url = f"{request.get_host()}/{doc_result[1:]}"
-                        logger.error('URL ОТПРАВКИ В OMNI' + str(docx_url))
+                        logger.debug('URL ОТПРАВКИ В OMNI ' + str(docx_url))
 
                         if '://' not in docx_url:
                             docx_url = 'https://' + docx_url
@@ -1079,28 +1084,31 @@ def task(request, acl_id)->bool:
                 file_md_abs = os.path.join(BASE_DIR, 'static/md/' + 'acl_{}'.format(str(acl_id)) + '.md')
                 UpdateCallBackStatus(request, acl_id, 'git_upload_status', 'Ошибка при формировании пути md файла', 0)
                 # return HttpResponse(json.dumps({'status': cache.get(acl_id, {})}), content_type="application/json")
-            if 'GIT_URL' not in request.session:
-                raise Exception('Неправильный url для git репозитория {}'.format(request.session['GIT_URL']))
+            # if 'GIT_URL' not in request.session:
+            #     raise Exception('Неправильный url для git репозитория {}'.format(request.session['GIT_URL']))
 
-            if 'GIT_FILENAME' not in request.session:
-                raise Exception('Неправильный filename для git репозитория {}'.format(request.session['GIT_FILENAME']))
+            # if 'GIT_FILENAME' not in request.session:
+            #     raise Exception('Неправильный filename для git репозитория {}'.format(request.session['GIT_FILENAME']))
 
             if 'GIT_USERNAME' not in request.session or 'GIT_PASSWORD' not in request.session:
                 logger.error('Невалидные учетные данные для аутентификации')
                 raise Exception('Невалидные учетные данные для аутентификации')
             UpdateCallBackStatus(request, acl_id, 'git_upload_status', 'Отправка запроса в gitlab')
-            g = GitWorker(request, request.session['GIT_URL'], request.session['GIT_USERNAME'],
+            gitlab_project = obj.project
+            gitlab_filename = obj.git_filename
+            gitlab_repo_url = ACLGitlabStore.objects.get(project=gitlab_project).gitlab_url
+            g = GitWorker(request, gitlab_repo_url, request.session['GIT_USERNAME'],
                           request.session['GIT_PASSWORD'], None, file_md_abs, taskid=acl_id)
             if g:
                 if g.clone():
-                    f = g.activity(request.session['GIT_FILENAME'])
+                    f = g.activity(gitlab_filename)
                     if f:
                         if g.addindex(f):
                             UpdateCallBackStatus(request, acl_id, 'git_upload_status',
                                                  "Отправка изменений на сервер")
                             if g.push(refspec='develop:develop'):
                                 UpdateCallBackStatus(request, acl_id, 'git_upload_status',
-                                                     f"Файл {request.session['GIT_FILENAME']} успешно загружен в репозиторий", 2)
+                                                     f"Файл {gitlab_filename} успешно загружен в репозиторий", 2)
                                 is_work_done = True
                                 if settings.DEBUG:
                                     logger.debug('Файл загружен в проект')
@@ -1111,8 +1119,8 @@ def task(request, acl_id)->bool:
             #is_work_done = False
         finally:
             if 'ACT_MAKE_GIT' in request.session: del request.session['ACT_MAKE_GIT']
-            if 'GIT_URL' in request.session: del request.session['GIT_URL']
-            if 'GIT_FILENAME' in request.session: del request.session['GIT_FILENAME']
+            # if 'GIT_URL' in request.session: del request.session['GIT_URL']
+            # if 'GIT_FILENAME' in request.session: del request.session['GIT_FILENAME']
             if settings.DEBUG:
                 logger.debug('Очистка переменных GIT')
 
@@ -1161,11 +1169,11 @@ def act(request, acl_id=None, job=None, do=None):
             if j == job:
                 if tasklist[jobs.index(j)] in old:
                     old.remove(tasklist[jobs.index(j)])
-                    if j == 'git':
-                            git_url = [x for x in old if ':' in x]
-                            if len(git_url) > 0: old.remove(git_url[0])
-                            if 'GIT_URL' in request.session: del request.session['GIT_URL']
-                            if 'GIT_FILENAME' in request.session: del request.session['GIT_FILENAME']
+                    # if j == 'git':
+                    #         git_url = [x for x in old if ':' in x]
+                    #         if len(git_url) > 0: old.remove(git_url[0])
+                            # if 'GIT_URL' in request.session: del request.session['GIT_URL']
+                            # if 'GIT_FILENAME' in request.session: del request.session['GIT_FILENAME']
                     if tasklist[jobs.index(j)] in request.session:
                         del request.session[tasklist[jobs.index(j)]]
                     break
@@ -1174,12 +1182,12 @@ def act(request, acl_id=None, job=None, do=None):
          old.append(tasklist[jobs.index(job)])
          request.session[tasklist[jobs.index(job)]] = True
 
-         if job == 'git' and request.POST.get('git_url', '') != '':
-             request.session['GIT_URL'] = request.POST.get('git_url')
-             old.append(request.POST.get('git_url'))
-         if job == 'git' and request.POST.get('git_file', '') != '':
-             request.session['GIT_FILENAME'] = request.POST.get('git_file')
-             old.append(request.POST.get('git_file'))
+         # if job == 'git' and request.POST.get('git_url', '') != '':
+         #     request.session['GIT_URL'] = request.POST.get('git_url')
+         #     old.append(request.POST.get('git_url'))
+         # if job == 'git' and request.POST.get('git_file', '') != '':
+         #     request.session['GIT_FILENAME'] = request.POST.get('git_file')
+         #     old.append(request.POST.get('git_file'))
 
     #if len(old) > 0:
     old = ";".join(old)


==== File: ownerlist/utils.py ====
@@ -41,7 +41,7 @@ try:
 except ImportError:
     logging.error('Error load requests_ntlm, run pip install requests_ntlm')
 
-COMMIT_MESSAGE = '[ACL PORTAL] Add acl-MD file'
+COMMIT_MESSAGE = '[ACL PORTAL] Update file:'
 FUN_SPEED = 0
 BASE_DIR = Path(__file__).resolve().parent.parent
 LOCAL_UID = None
@@ -195,8 +195,8 @@ def request_handler(request, namespace=''):
                         request.session['ACT_MAKE_GIT'] = True
                     elif 'ACT_MAKE_GIT' in request.session:
                          del request.session['ACT_MAKE_GIT']
-                         if 'GIT_URL' in request.session:
-                             del request.session['GIT_URL']
+                         # if 'GIT_URL' in request.session:
+                         #     del request.session['GIT_URL']
 
                     if request.POST.get('action_make_omni', '') == 'on':
                         request.session['ACT_OMNI'] = True
@@ -916,7 +916,7 @@ def make_doc(request=None, data_set={}, fileuuid='', gitlab_repo_url='', gitlab_
                             except Exception as e:
                                 logger.error(e)
             except Exception as e:
-                logger.error('Ошибка при нормализации пробелов docx')
+                logger.warning('Ошибка при нормализации пробелов docx. Продолжаем создание docx.')
                 continue
         return data_set
 
@@ -968,6 +968,7 @@ def make_doc(request=None, data_set={}, fileuuid='', gitlab_repo_url='', gitlab_
         table_rows = len(table_tmp.rows) - 1  #Берем все строки из таблицы
         table_cols = len(table_tmp.columns)
         if data_inx == 0:  # Для таблицы контакты, меняем правила игры
+            notFoundCount = 0
             for row_idx, row_data in enumerate(data_set[data]):
                 try:
                     if row_idx >= table_rows:
@@ -983,9 +984,11 @@ def make_doc(request=None, data_set={}, fileuuid='', gitlab_repo_url='', gitlab_
                             run_strike.font.strike = True
                             run_strike.font.highlight_color = WD_COLOR_INDEX.RED
                         except:
-                            logger.warning("Удалённой строки страницы Контакты не найдено")
+                            notFoundCount += 1
                 except Exception as e:
                     logger.error(e)
+            if notFoundCount > 0:
+                logger.info(f"Не удалось найти {notFoundCount} строк(и) страницы Контакты в gitlab")
         else:
             row_cnt = 0
             if data not in data_set:
@@ -1371,7 +1374,8 @@ class GitWorker:
         try:
             index = self.repo.index
             index.add([filename])
-            index.commit(COMMIT_MESSAGE)
+            clear_filename = os.path.basename(filename)
+            index.commit(f"{COMMIT_MESSAGE} {os.path.basename(clear_filename)}")
             #self.request.session['git_upload_status'].append({'status': "Локальный коммит изменений"})
             UpdateCallBackStatus(self.request, self.taskid, 'git_upload_status',
                                  "Локальный коммит изменений")
@@ -1559,7 +1563,8 @@ def ExtractDataDns(uploaded_file_url)->int:
 def ClearSessionMeta(request=None):
     """Функция очистки сессии при переходе на другую страницу"""
     if request:
-        SESSION_STORE = ['LOCAL_STORAGE', 'uuid', 'taskid', 'GIT_URL', 'ACT_MAKE_GIT', 'ACT_MAKE_DOCX', 'ACT_OMNI', 'file_download']
+        SESSION_STORE = ['LOCAL_STORAGE', 'uuid', 'taskid', 'ACT_MAKE_GIT', 'ACT_MAKE_DOCX', 'ACT_OMNI',
+                         'file_download']
         for sid in SESSION_STORE:
             if sid in request.session:
                 del request.session[sid]
@@ -1729,9 +1734,9 @@ def send_onmitracker(sender, title, text, attach, proxy=None, fake=None, request
     """.format(sender, title, text, str(uid), attach)
 
     body = bodyNotEncoded.encode('utf-8')
-    logger.error('BODY NOT ENCODED'+str(bodyNotEncoded))
-    logger.error('BODY ENCODED' + str(body))
-    logger.error('START SEND OMNI')
+    logger.debug('BODY NOT ENCODED:'+str(bodyNotEncoded))
+    logger.debug('BODY ENCODED:' + str(body))
+    logger.debug('START SEND OMNI')
 
     try:
         auth = HttpNtlmAuth('{}\\{}'.format(settings.LDAP_AUTH_CONNECTION_DOMAIN,
@@ -1745,8 +1750,8 @@ def send_onmitracker(sender, title, text, attach, proxy=None, fake=None, request
     for i in range(settings.ATTEMPS):
         try:
             #time.sleep(5)
-            logger.error('[{}] Отправка запроса в {}'.format(i, settings.OMNITRACKER_URL))
-            logger.error('[TRACE] Тело запроса: ' + body.decode())
+            logger.debug('[{}] Отправка запроса в {}'.format(i, settings.OMNITRACKER_URL))
+            logger.debug('[TRACE] Тело запроса: ' + body.decode())
             res = requests.post(settings.OMNITRACKER_URL, body, headers=OMNI_HTTP_HEADERS, timeout=settings.TIMEOUT, auth=auth)
             if i == 2:
                 send_to_mattermost(f"Попытка подключения номер: {i}.",
@@ -1755,7 +1760,7 @@ def send_onmitracker(sender, title, text, attach, proxy=None, fake=None, request
                 )
             if res and res.status_code == 200:
                         result = res.text
-                        logger.error('OMNITRACKER ANSWER ====' + result)
+                        logger.info('OMNITRACKER ANSWER ====' + result)
                         if result and len(result) > 3:
                             result = result.split('strResponse">')
                             if len(result) > 1:


