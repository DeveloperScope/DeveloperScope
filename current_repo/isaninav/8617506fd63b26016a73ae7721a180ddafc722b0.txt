==== File: accesslist/urls.py ====
@@ -6,6 +6,7 @@ urlpatterns = [
     path("welcome/", AclDemo.as_view(), name="acldemo_urls"),
     path("history/", Aclhistory.as_view(), name="aclhistory_urls"),
     path("history/<uuid:acl_id>/", Aclhistory.as_view(), name="aclhistory_urls"),
+    path("history/acl_pusher/", check_taskid_and_status, name="acl_pusher"),
     path("taskstatus/<str:taskid>/", taskstatus, name='taskstatus_urls'),
 
     re_path("info/", include([


==== File: accesslist/views.py ====
@@ -13,6 +13,7 @@ from ownerlist.utils import FORM_APPLICATION_KEYS, FORM_URLS, BaseView, GitWorke
     ClearSessionMeta, upload_file_handler, omni_check_status, SendMessageToApprove
 from ownerlist.utils import send_onmitracker, send_to_mattermost
 from ownerlist.utils import get_files_from_gitlab, convert_md_to_dict, get_acl_from_gitlab
+from ownerlist.utils import acl_sending_retry_checking
 import json
 import uuid
 from django.views.decorators.csrf import csrf_exempt
@@ -773,7 +774,65 @@ def upload_acl_from_git(request):
             return HttpResponse(json.dumps(result), content_type="application/text")
         return HttpResponse(json.dumps("Error method type"), content_type="application/text")
 
+def check_taskid_and_status(request):
+    '''Проверяет acl в omnitracker, если нет - переотправляет'''
+    user = request.user
+    if user.is_authenticated and user.is_superuser:
 
+        aclObject_list = ACL.objects.filter(status="APRV")
+        for aclObject in aclObject_list:
+            try:
+                acl_id = aclObject.id
+                acl_checking_result = acl_sending_retry_checking(aclObject)
+                if acl_checking_result is None:
+                    try:
+                        if aclObject.taskid != '':
+                            logger.info(f'[Перехвачен дубль обращения!] Номер SD:{aclObject.taskid}')
+                            # send_to_mattermost(f"[Перехвачен Дубль обращения] ACL уже назначен Номер SD:{aclObject.taskid}; Ссылка на ACL :https://acl.vesta.ru/acl/info/{str(aclObject.id)}")
+                            return HttpResponse(json.dumps({'status': aclObject.status}, ensure_ascii=False), content_type="application/json")
+                        try:
+                            doc_result = make_doc(request, json.loads(aclObject.acltext), acl_id)
+                        except Exception as e:
+                            logger.error(f'Ошибка при создании docx: {e}')
+
+                        try:
+                            if settings.OMNITRACKER_URL:
+                                try:
+                                    docx_url = f"{request.get_host()}/{doc_result[1:]}"
+                                    logger.error('URL ОТПРАВКИ В OMNI' + str(docx_url))
+
+                                    if '://' not in docx_url:
+                                        docx_url = 'https://' + docx_url
+
+                                except Exception as e:
+                                    docx_url = ''
+                                    logger.error(f'Ошибка при создании ссылки на docx: {e}')
+                                result_id = send_onmitracker(sender=aclObject.owner.email,
+                                                             title=f'SH0458 Запрос на предоставление доступа согласован : {str(aclObject.approve.first().get_full_name())}',
+                                                             text=f'Прошу предоставить сетевой доступ, согласно ACL. Согласование владельца ресурса во вложении. Ссылка на ACL :https://acl.vesta.ru/acl/info/{str(acl_id)}',
+                                                             attach=docx_url,
+                                                             fake=False,
+                                                             request=request,
+                                                             uid=acl_id
+                                                             )
+                            result_id = int(result_id) or 0
+                            if result_id == 0:
+                                raise Exception('Мы не смогли создать обращение через OmniTracker')
+                            else:
+                                if aclObject:
+                                    aclObject.taskid = str(result_id)
+                                    aclObject.save(update_fields=['taskid'])
+                                    send_to_mattermost(f'[acl_pusher][owner={aclObject.owner}, Ссылка на ACL: https://acl.vesta.ru/acl/info/{str(aclObject.id)}] Получен номер SD("{result_id}"). Добавление и проверка записи на портале={aclObject.taskid}')
+                                if 'ACT_OMNI' in request.session: del request.session['ACT_OMNI']
+                        except Exception as e:
+                            logger.error(f'Произошла ошибка при формировании заявки: {e}')
+
+                    except Exception as e:
+                        logger.error(f'Ошибка при отправки обращения в SD: {e}')
+            except Exception as e:
+                logger.error(f'Ошибка при работе с acl({acl_id}): {e} ')
+                continue
+    return redirect(reverse('aclhistory_urls'))
 
 #@csrf_exempt
 def UploadTemplate(request):


==== File: ownerlist/utils.py ====
@@ -1922,3 +1922,88 @@ def convert_md_to_dict(md_content: str):
         return result
     except Exception as e:
         logger.error(e)
+
+def acl_sending_retry_checking(aclObject):
+    '''Проверяет acl в omnitracker на наличие заявки'''
+    acl_taskid = aclObject.taskid
+    acl_status = aclObject.status
+
+    omni_taskid = check_taskId_by_uuid(aclObject.id)
+    omni_acl_status, omni_http_status = omni_check_status(omni_taskid)
+
+    if omni_taskid != '':
+        result = omni_taskid
+        # Проверяем Номер SD
+        if acl_taskid != omni_taskid:
+            aclObject.taskid = str(omni_taskid)
+            aclObject.save(update_fields=['taskid'])
+        if acl_status != omni_acl_status:
+            # Проверяем статус
+            if None == omni_acl_status:
+                return
+            else:
+                if omni_acl_status in ['CMP', 'JOB', 'CNL']:
+                    aclObject.status = omni_acl_status
+                    aclObject.save(update_fields=['status'])
+    else:
+        result = None
+    return result
+
+
+
+
+
+
+
+
+def check_taskId_by_uuid(uuid, proxy=None):
+    '''Функция проверяет номер SD по номеру UUID в omnitracker'''
+
+    body = '''<?xml version="1.0" encoding="utf-8"?>
+    <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.omninet.de/OtWebSvc/v1">
+      <soap:Body>
+        <tns:InvokeScript>
+          <tns:Script name="OmniAPI" runAt="Server">
+            <tns:Parameters>
+              <tns:StringVal name="strFunction">GetIncInfoByExternalNumber</tns:StringVal>
+              <tns:StringVal name="strExternalNumber">{}</tns:StringVal>
+            </tns:Parameters>
+          </tns:Script>
+        </tns:InvokeScript>
+      </soap:Body>
+    </soap:Envelope>
+    '''.format(str(uuid)).encode('utf-8')
+    try:
+        auth = HttpNtlmAuth('{}\\{}'.format(settings.LDAP_AUTH_CONNECTION_DOMAIN,
+                                            settings.LDAP_AUTH_CONNECTION_USERNAME),
+                                            settings.LDAP_AUTH_CONNECTION_PASSWORD)
+    except Exception as e:
+        logger.error(f'Ошибка авторизации LDAP: {e}')
+    try:
+        response = requests.post(settings.OMNITRACKER_URL, body, headers=OMNI_HTTP_HEADERS, proxies=proxy,
+                          auth=auth)
+        if response and response.status_code == 200:
+
+            result = response.text
+            logger.info('OMNITRACKER ANSWER ====' + result)
+
+            if result and len(result) > 3:
+                result = result.split('strResponse">')
+                if len(result) > 1:
+                    result = result[1].split('</')[0]
+                else:
+                    result = response.text.split('strResponse>')
+                    if len(result) > 1:
+                        result = result[1].split('</')[0]
+                    else:
+                        logger.warning(f'uuid: {uuid}. Сервер omni вернул неправильный ответ')
+                        result = ''
+    except Exception as e:
+        logger.error(f'[check_taskId_by_uuid] Error: {e}')
+        result = ''
+
+    try:
+        result = int(result)
+    except:
+        result = ''
+    return str(result)
\ No newline at end of file


==== File: templates/base.html ====
@@ -198,6 +198,13 @@
                       </span>
                     </a>
                   </nav>
+                    <nav class="nav-group">
+                    <a href="{% url 'acl_pusher' %}" class="nav-link">
+                      <span class="nav-text">
+                         <i class="fas fa-user-cog pr-1"></i> Проверить/Переотправить ACL
+                      </span>
+                    </a>
+                  </nav>
                 {% endif %}
 
                </div>


