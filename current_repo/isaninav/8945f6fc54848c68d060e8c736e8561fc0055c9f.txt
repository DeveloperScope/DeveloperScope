==== File: accesslist/views.py ====
@@ -886,18 +886,25 @@ def task(request, acl_id)->bool:
             if doc_ready:
                 UpdateCallBackStatus(request, acl_id, 'omni_email_status', 'Отправляем запрос на сервер ... (Пожалуйста, подождите)')
             else:
-                UpdateCallBackStatus(request, acl_id, 'omni_email_status', 'Генерация docx файла...')
-                doc_result = make_doc(request, request.session['LOCAL_STORAGE'], acl_id)
-                doc_ready = True
+                try:
+                    UpdateCallBackStatus(request, acl_id, 'omni_email_status', 'Генерация docx файла...')
+                    logger.info(f"При создании файла: {request.session['LOCAL_STORAGE']}")
+                    doc_result = make_doc(request, request.session['LOCAL_STORAGE'], acl_id)
+                    doc_ready = True
+                except Exception as e:
+                    logger.error(e)
 
             try:
                 if settings.OMNITRACKER_URL:
-                    docx_url = f"{request.get_host()}/{doc_result[1:]}"
-                    logger.error('URL ОТПРАВКИ В OMNI' + str(docx_url))
+                    try:
+                        docx_url = f"{request.get_host()}/{doc_result[1:]}"
+                        logger.error('URL ОТПРАВКИ В OMNI' + str(docx_url))
 
-                    if '://' not in docx_url:
-                        docx_url = 'https://' + docx_url
+                        if '://' not in docx_url:
+                            docx_url = 'https://' + docx_url
 
+                    except:
+                        docx_url = ''
                     result_id = send_onmitracker(sender=obj.owner.email,
                                                  title=f'SH0458 Запрос на предоставление доступа согласован : {str(ACL.objects.get(id=acl_id).approve.first().get_full_name())}',
                                                  text=f'Прошу предоставить сетевой доступ, согласно ACL. Согласование владельца ресурса во вложении. Ссылка на ACL :https://acl.vesta.ru/acl/info/{str(acl_id)}',
@@ -951,7 +958,7 @@ def task(request, acl_id)->bool:
             is_work_done = False
         finally:
             if doc_result:
-                del request.session['ACT_OMNI']
+                if 'ACT_OMNI' in request.session: del request.session['ACT_OMNI']
                 if result_id is not None and result_id > 0:
                     UpdateCallBackStatus(request, acl_id, 'omni_email_status',
                                          '<p class="text-success">Обращение под номером {} успешно зарегистрировано</p>'.format(
@@ -1007,8 +1014,8 @@ def task(request, acl_id)->bool:
             UpdateCallBackStatus(request, acl_id, 'git_upload_status', '{}'.format(e), 0)
             #is_work_done = False
         finally:
-            del request.session['ACT_MAKE_GIT']
-            del request.session['GIT_URL']
+            if 'ACT_MAKE_GIT' in request.session: del request.session['ACT_MAKE_GIT']
+            if 'GIT_URL' in request.session: del request.session['GIT_URL']
             if settings.DEBUG:
                 logger.debug('Очистка переменных GIT')
 


==== File: ownerlist/utils.py ====
@@ -1627,9 +1627,12 @@ def send_onmitracker(sender, title, text, attach, proxy=None, fake=None, request
     logger.error('BODY ENCODED' + str(body))
     logger.error('START SEND OMNI')
 
-    auth = HttpNtlmAuth('{}\\{}'.format(settings.LDAP_AUTH_CONNECTION_DOMAIN,
-                                        settings.LDAP_AUTH_CONNECTION_USERNAME),
-                        settings.LDAP_AUTH_CONNECTION_PASSWORD)
+    try:
+        auth = HttpNtlmAuth('{}\\{}'.format(settings.LDAP_AUTH_CONNECTION_DOMAIN,
+                                            settings.LDAP_AUTH_CONNECTION_USERNAME),
+                                            settings.LDAP_AUTH_CONNECTION_PASSWORD)
+    except Exception as e:
+        send_to_mattermost(f'Ошибка авторизации LDAP: {e}')
     result = 0
 
 
@@ -1670,9 +1673,12 @@ def send_onmitracker(sender, title, text, attach, proxy=None, fake=None, request
             else:
                     if res.status_code == 401 and not auth:
                         if 'requests_ntlm' in sys.modules:
-                            auth = HttpNtlmAuth('{}\\{}'.format(settings.LDAP_AUTH_CONNECTION_DOMAIN,
-                                                                settings.LDAP_AUTH_CONNECTION_USERNAME),
-                                                                settings.LDAP_AUTH_CONNECTION_PASSWORD)
+                            try:
+                                auth = HttpNtlmAuth('{}\\{}'.format(settings.LDAP_AUTH_CONNECTION_DOMAIN,
+                                                                    settings.LDAP_AUTH_CONNECTION_USERNAME),
+                                                                    settings.LDAP_AUTH_CONNECTION_PASSWORD)
+                            except Exception as e:
+                                send_to_mattermost(f'Ошибка авторизации LDAP: {e}')
                             logger.info('[TRACE] Пытаемся авторизоватся в omni')
                         else:
                             logger.error('Нужный модуль requests_ntlm не загружен :-(')
@@ -1736,9 +1742,12 @@ def omni_check_status(id=None, proxy=None):
 
     try:
         auth = HttpNtlmAuth('{}\\{}'.format(settings.LDAP_AUTH_CONNECTION_DOMAIN,
-                                                                settings.LDAP_AUTH_CONNECTION_USERNAME),
-                                                                settings.LDAP_AUTH_CONNECTION_PASSWORD)
+                                            settings.LDAP_AUTH_CONNECTION_USERNAME),
+                                            settings.LDAP_AUTH_CONNECTION_PASSWORD)
+    except Exception as e:
+        logger.error(f'Ошибка авторизации LDAP: {e}')
 
+    try:
         r = requests.post(settings.OMNITRACKER_URL, body, headers=OMNI_HTTP_HEADERS, proxies=proxy,
                           auth=auth, timeout=1)
         if r.status_code == 200:
@@ -1754,8 +1763,9 @@ def omni_check_status(id=None, proxy=None):
                     print(e)
                 #return r.text
 
-    except:
+    except Exception as e:
         result = ''
+        logger.info(f'Ошибка: {e}')
 
     finally:
         if result in OMNI_HTTP_STATUS:


