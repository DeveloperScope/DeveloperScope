==== File: accesslist/templates/acl_history.html ====
@@ -107,7 +107,7 @@
               </td>
               <td>{{ acllist.created}}</td>
               <td class="text-secondary">{{ acllist.id}}</td>
-              <td class="text-secondary">{% if acllist.taskid == '' %}Еще не назначено{% else %}{{ acllist.taskid }}{% endif %}</td>
+              <td class="text-secondary">{% if acllist.taskid != '' %}{{ acllist.taskid }}{% else %}Еще не назначено{% endif %}</td>
               <td class="text-secondary"><a href="{% url 'aclcreate_urls'%}{{ acllist.id }}/"><i class="fas fa-align-justify mr-2"></i>Подробнее</a></td>
             </tr>
             {% endfor %}


==== File: accesslist/views.py ====
@@ -4,14 +4,14 @@ from django.http import HttpResponseRedirect, HttpResponseForbidden, HttpRespons
 from django.urls import reverse
 from django.contrib import messages
 from django.http import HttpResponse
-from .models import ACL
+from .models import ACL, ACLGitlabStore
 from ownerlist.models import Owners, Iplist
 import os
 from ownerlist.utils import make_doc, MakeMarkDown, request_handler, is_valid_uuid, ip_status, logger, get_client_ip, \
     MakeTemporaryToken, ParseDocx
 from ownerlist.utils import FORM_APPLICATION_KEYS, FORM_URLS, BaseView, GitWorker, BASE_DIR, UpdateCallBackStatus, \
     ClearSessionMeta, upload_file_handler, omni_check_status, SendMessageToApprove
-from ownerlist.utils import send_onmitracker
+from ownerlist.utils import send_onmitracker, send_to_mattermost
 import json
 import uuid
 from django.views.decorators.csrf import csrf_exempt
@@ -851,8 +851,8 @@ def task(request, acl_id)->bool:
                         docx_url = 'https://' + docx_url
 
                     result_id = send_onmitracker(sender=obj.owner.email,
-                                                 title='Создание ACL листа',
-                                                 text='Прошу предоставить доступ на основе ACL',
+                                                 title=f'SH0458 Запрос на предоставление доступа согласован : {str(ACL.objects.get(id=acl_id).approve.get_full_name())}',
+                                                 text=f'Прошу предоставить сетевой доступ, согласно ACL. Согласование владельца ресурса во вложении. Ссылка на ACL :https://acl.vesta.ru/acl/info/{str(acl_id)}',
                                                  attach=docx_url,
                                                  fake=False,
                                                  request=request,
@@ -972,7 +972,9 @@ def task(request, acl_id)->bool:
             obj.status = 'JOB'
         else:
             obj.status = 'APRV' #Фикс баги если сформировать docx то статус будет на исполнении
-    if result_id: obj.taskid = result_id
+    if result_id:
+        obj.taskid = str(result_id)
+        send_to_mattermost(f"Записываю полученный номер SD({result_id}, тип: {type(result_id)}) в obj.taskid.")
     #else:
     #obj.status = 'FL'
     if is_work_done or obj.status == 'FLY':
@@ -982,6 +984,7 @@ def task(request, acl_id)->bool:
             obj.status = 'APRV' #Фикс баги если сформировать docx то статус будет на исполнении
         with transaction.atomic():
             obj.save(update_fields=['status', 'taskid'])
+            send_to_mattermost(f'Сохранение status, taskid в obj.[ obj.status={obj.status}, obj.taskid = {obj.taskid} ]')
 
     if settings.DEBUG:
         print("REQUEST FINISH, SAVING DATA: {}: {}".format([job for job in tasklist if job in request.session], JOB))


==== File: ownerlist/utils.py ====
@@ -1704,7 +1704,7 @@ def send_onmitracker(sender, title, text, attach, proxy=None, fake=None, request
                 print(e)
     if not result:
         return 0
-    send_to_mattermost(f"Обращение [uuid:{uuid}] успешно отправлено. Получен ответ: [result:{result}]. Отправитель:{sender}")
+    send_to_mattermost(f"Обращение [uid:{uid}] успешно отправлено. Получен ответ: [result:{result}]. Отправитель:{sender}")
     return result
 
 


