==== File: accesslist/templates/acl_history.html ====
@@ -58,8 +58,30 @@
             <tr>
               <th>#</th>
               <th></th>
-              <th scope="col" style="width: 20%">Проект</th>
-              <th scope="col" style="width: 155px">Статус</th>
+              <th scope="col" style="width: 20%">Проект
+                  <span id="open-project-filter">
+                      <i class="fas fa-filter"></i>
+                  </span>
+                  <div style="position: relative">
+                    <input type="text"  id="project-filter-input" class="form-control w-50" style="display: none;" placeholder="Проект">
+                    <div id="search-project-filter">
+                        <i id="project-filter-icon-search" class="fas fa-search" style="display: none;position: absolute; top: 50%; transform: translateY(-50); right: 50%;"></i>
+                    </div>
+                  </div>
+              </th>
+                <th scope="col" style="width: 155px">Статус
+                    {% csrf_token %}
+                    <span id="open-status-filter">
+                      <i class="fas fa-filter"></i>
+                    </span>
+                    <select id="status-filter-select" class="filter-select" style="display: none;"  onchange="updateStatusFilterValue('status-filter-select')">
+                        <option value="" >Убрать фильтр</option>
+                        {% for status in acl.APL_STATUS %}
+                            <option value="{{ status.0 }}">{{ status.1 }}</option>
+                        {% endfor %}
+                    </select>
+
+                </th>
               <th scope="col">Пользователь</th>
               <th scope="col">Дата создания</th>
               <th scope="col">UUID</th>
@@ -203,5 +225,108 @@
         navigator.clipboard.writeText(text);
     }
 
+</script>
+<script>
+<!--  Проверка/Подстановка значений фильтров  -->
+    const status_filter_select = document.getElementById('status-filter-select');
+    const status_filter_options = status_filter_select.options;
+    const url_parts = window.location.href.split('/');
+    const filter_value_from_url = url_parts[url_parts.length -2];
+
+    const check_filter = url_parts[url_parts.length -3]
+
+    if(filter_value_from_url != '' && filter_value_from_url != 'history'){
+<!--    Если отфильтровано по статусу    -->
+        if(check_filter === 'status'){
+
+            for(var i=0; i < status_filter_options.length; i++){
+                var value = status_filter_options[i].value;
+                if(value != '' && value ==  filter_value_from_url){
+                    status_filter_select.value = value;
+                    status_filter_select.style.backgroundColor = "gray";
+                    status_filter_select.style.display = "inline-block";
+                }
+            }
+        }
+<!--    Если отфильтровано по проекту   -->
+        else if(check_filter === "project"){
+            document.querySelector("#project-filter-input").value = decodeURIComponent(filter_value_from_url);
+            document.querySelector("#project-filter-input").style.display = "inline-block";
+            document.querySelector("#project-filter-icon-search").style.display = "inline-block";
+        }
+    }
+    else{
+        console.log('Фильтр не задан');
+    }
+</script>
+
+<script>
+<!--  Project filter  -->
+    const filterProjectIconFilter = document.querySelector("#open-project-filter");
+    const filterProjectInput = document.querySelector("#project-filter-input");
+    const filterProjectSearch = document.querySelector("#search-project-filter");
+    if(filterProjectInput == ''){
+        window.location.pathname = "{% url 'aclhistory_urls' %}";
+    }
+    filterProjectIconFilter.addEventListener('click', () => {
+        if(filterProjectInput.style.display == 'none'){
+            filterProjectInput.style.display = "inline-block";
+            document.querySelector("#project-filter-icon-search").style.display = "inline-block";
+        }
+        else if(filterProjectInput.value === ''){
+            filterProjectInput.style.display = 'none';
+            document.querySelector("#project-filter-icon-search").style.display = 'none';
+        }
+    });
+    filterProjectSearch.addEventListener('click', () => {
+        updateProjectFilterValue(filterProjectInput);
+    });
+    filterProjectInput.addEventListener('keyup', event => {
+        if (event.key === 'Enter'){
+            updateProjectFilterValue(filterProjectInput);
+        }
+    });
+
+    function updateProjectFilterValue(inputElement){
+        var value = inputElement.value;
+        if (value == '') {
+            window.location.pathname = "{% url 'aclhistory_urls' %}";
+        }
+        else{
+            var target_url = "{% url 'aclhistory_urls_filter_project' project_name="value" %}".replace(/value/, value);
+            window.location.pathname = target_url;
+        }
+    }
+</script>
+
+<script>
+<!-- Status filter -->
+    const filterStatusIconFilter = document.querySelector("#open-status-filter");
+    const filterStatusSelect = document.querySelector("#status-filter-select");
+
+    filterStatusIconFilter.addEventListener('click', () => {
+        if(filterStatusSelect.style.display == 'none'){
+            filterStatusSelect.style.display = "inline-block";
+        }
+        else if(filterStatusSelect.value === ''){
+            filterStatusSelect.style.display = 'none';
+        }
+    });
+
+
+    function updateStatusFilterValue(selectId) {
+        var selectElement = document.getElementById(selectId);
+        var value = selectElement.value;
+        if (value == '') {
+            selectElement.style.backgroundColor = "white";
+            window.location.pathname = "{% url 'aclhistory_urls' %}";
+        }
+        else if (value){
+            selectElement.style.backgroundColor = "gray";
+            var target_url = "{% url 'aclhistory_urls_filter_status' acl_status="value" %}".replace(/value/, value);
+            window.location.pathname = target_url;
+        }
+    }
+
 </script>
 {% endblock %}


==== File: accesslist/urls.py ====
@@ -6,6 +6,8 @@ urlpatterns = [
     path("welcome/", AclDemo.as_view(), name="acldemo_urls"),
     path("history/", Aclhistory.as_view(), name="aclhistory_urls"),
     path("history/<uuid:acl_id>/", Aclhistory.as_view(), name="aclhistory_urls"),
+    path("history/status/<str:acl_status>/", Aclhistory.as_view(), name="aclhistory_urls_filter_status"),
+    path("history/project/<str:project_name>/", Aclhistory.as_view(), name="aclhistory_urls_filter_project"),
     path("history/acl_pusher/", check_taskid_and_status, name="acl_pusher"),
     path("taskstatus/<str:taskid>/", taskstatus, name='taskstatus_urls'),
 


==== File: accesslist/views.py ====
@@ -186,44 +186,50 @@ class ObjectMixin:
 
 class Aclhistory(BaseView, LoginRequiredMixin, View):
     """История запросов"""
-    def get(self, request, acl_id=None):
-            ClearSessionMeta(request)
-            if acl_id is not None:
-                #if request.user.is_staff:
-                    acllist= ACL.objects.filter(id__exact=acl_id)
-                #else:
-                    #acllist = ACL.objects.filter(id__exact=acl_id, owner__email__iexact=request.user.email)
+    def get(self, request, acl_id=None, acl_status=None, project_name=None):
+        ClearSessionMeta(request)
+        if acl_id is not None:
+            #if request.user.is_staff:
+            acllist= ACL.objects.filter(id__exact=acl_id)
+            #else:
+                #acllist = ACL.objects.filter(id__exact=acl_id, owner__email__iexact=request.user.email)
+        elif acl_status is not None:
+            acllist = ACL.objects.filter(status__exact=acl_status).order_by("-created", "-pkid")
+        elif project_name is not None:
+            acllist = ACL.objects.filter(project__icontains=project_name).order_by("-created", "-pkid")
+            logger.info('Отсортировал по проекту')
+        else:
+            if request.user.is_staff:
+                acllist = ACL.objects.order_by("-created", "-pkid")
             else:
-                if request.user.is_staff:
-                    acllist = ACL.objects.order_by("-created", "-pkid")
-                else:
-                    acllist = ACL.objects.filter(Q(owner_id=request.user.id) | Q(approve__exact=request.user)).order_by("-created", "-pkid") #owner__email__iexact=request.user.email
+                acllist = ACL.objects.filter(Q(owner_id=request.user.id) | Q(approve__exact=request.user)).order_by("-created", "-pkid") #owner__email__iexact=request.user.email
 
-            paginator = Paginator(acllist, 10)
-            page_number = request.GET.get('page', 1)
-            page = paginator.get_page(page_number)
 
-            is_paginated = page.has_other_pages()
 
-            if page.has_previous():
-                prev_url = '?page={}'.format(page.previous_page_number())
-            else:
-                prev_url = ''
+        paginator = Paginator(acllist, 10)
+        page_number = request.GET.get('page', 1)
+        page = paginator.get_page(page_number)
 
-            if page.has_next():
-                next_url = '?page={}'.format(page.next_page_number())
-            else:
-                next_url = ''
+        is_paginated = page.has_other_pages()
 
-            context = {
-                "acl": ACL,
-                "acllists": page,
-                "is_paginated": is_paginated,
-                "next_url": next_url,
-                "prev_url": prev_url
-            }
+        if page.has_previous():
+            prev_url = '?page={}'.format(page.previous_page_number())
+        else:
+            prev_url = ''
+
+        if page.has_next():
+            next_url = '?page={}'.format(page.next_page_number())
+        else:
+            next_url = ''
 
-            return render(request, 'acl_history.html', context=context)
+        context = {
+            "acl": ACL,
+            "acllists": page,
+            "is_paginated": is_paginated,
+            "next_url": next_url,
+            "prev_url": prev_url,
+        }
+        return render(request, 'acl_history.html', context=context)
 
 
 class AclCreate(BaseView, LoginRequiredMixin, ObjectMixin, View):
@@ -789,7 +795,6 @@ def check_taskid_and_status(request):
                         if aclObject.taskid != '':
                             logger.info(f'[Перехвачен дубль обращения!] Номер SD:{aclObject.taskid}')
                             # send_to_mattermost(f"[Перехвачен Дубль обращения] ACL уже назначен Номер SD:{aclObject.taskid}; Ссылка на ACL :https://acl.vesta.ru/acl/info/{str(aclObject.id)}")
-                            return HttpResponse(json.dumps({'status': aclObject.status}, ensure_ascii=False), content_type="application/json")
                         try:
                             doc_result = make_doc(request, json.loads(aclObject.acltext), acl_id)
                         except Exception as e:
@@ -832,7 +837,7 @@ def check_taskid_and_status(request):
             except Exception as e:
                 logger.error(f'Ошибка при работе с acl({acl_id}): {e} ')
                 continue
-    return redirect(reverse('aclhistory_urls'))
+    return HttpResponseRedirect(reverse('aclhistory_urls'))
 
 #@csrf_exempt
 def UploadTemplate(request):


==== File: static/css/style.css ====
@@ -1097,4 +1097,17 @@ position: absolute;
   display: none!important;
 }
 
+}
+
+.filter-select {
+    width: 100%;
+    height: 30px;
+    overflow: hidden;
+    transition: height 0.3s ease-in-out;
+}
+#filter-select {
+    background-color:white;
+}
+#filter-select option[value=""]{
+    background-color:gray;
 }
\ No newline at end of file


