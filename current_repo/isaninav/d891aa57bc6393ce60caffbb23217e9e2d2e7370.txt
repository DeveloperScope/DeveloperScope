==== File: accesslist/views.py ====
@@ -567,9 +567,10 @@ def save__form(request, owner_form: None, acl_id)->None:
             obj.git_filename = owner_form[9]
             try:
                 department = request.POST.get("department")
-                team = Team.objects.get(name=department)
-                if team:
-                    obj.team = team
+                if department != '' or department != 'Нет':
+                    team = Team.objects.get(name=department)
+                    if team:
+                        obj.team = team
             except Exception as e:
                 logger.warning(f'Не удалось сохранить team в БД: {e}')
             obj.save()
@@ -744,7 +745,7 @@ def AclStageChange(request,  *args, **kwargs):
 def Gitcheck(request):
     """Функция сохранения и проверки git проекта"""
     if request.method == 'POST':
-        result = {'status': 'Данные сохранены'}
+        result = {'status': 'Git проект и файл корректно загружены'}
         if 'git_url' in request.POST:
             if request.POST.get('git_url', '') == '':
                 if 'ACT_MAKE_GIT' in request.session:
@@ -1293,19 +1294,21 @@ def get_project_filter_by_department(request=None):
 
     try:
         team_id = request.GET.get('team_id')
-        team_obj = Team.objects.get(id=team_id)
-        git_group_url = team_obj.gitlab_group_url
-        # pattern = r'https://gitlab\.alfastrah\.ru/acl/([^/]+/[^/]+)$'
-        # result = re.search(pattern, git_group_url).group(1)
-        return HttpResponse(json.dumps(git_group_url), content_type="application/text")
+        if team_id != '':
+            team_obj = Team.objects.get(id=team_id)
+            git_group_url = team_obj.gitlab_group_url
+            return HttpResponse(json.dumps(git_group_url), content_type="application/text")
+        return HttpResponse(json.dumps([]), content_type="application/text")
     except Exception as e:
         logger.error(f'Ошибка при получении фильтра')
 
 def set_team_id(request=None):
     try:
         team_name = request.GET.get('team_name')
-        team_obj = Team.objects.get(name=team_name)
-        team_id = team_obj.id
-        return HttpResponse(json.dumps(team_id), content_type="application/text")
+        if team_name != '' and team_name != "Нет":
+            team_obj = Team.objects.get(name=team_name)
+            team_id = team_obj.id
+            return HttpResponse(json.dumps(team_id), content_type="application/text")
+        return HttpResponse(json.dumps([]), content_type="application/text")
     except Exception as e:
         logger.error(f'Ошибка при установке teamid')
\ No newline at end of file


==== File: ownerlist/utils.py ====
@@ -942,7 +942,7 @@ def make_doc(request=None, data_set={}, fileuuid='', gitlab_repo_url='', gitlab_
                             except Exception as e:
                                 logger.error(e)
             except:
-                logger.warning('Ошибка при нормализации пробелов docx. Продолжаем создание docx.')
+                logger.info('Не удалось нормализовать пробелы docx. Продолжаем создание docx.')
                 continue
         return data_set
 
@@ -1305,7 +1305,6 @@ class GitWorker:
 
              if PASSWORD:
                  self.PASSWORD = urllib.parse.quote_plus(PASSWORD)
-                 logger.info(f'Пароль пользователя {self.USERNAME} успешно получен и замаскирован.')
              # if '@' in self.PASSWORD:
              #     logger.warning('В пароле пользователя {} имеется запрещенный символ'.format(self.USERNAME))
 
@@ -1354,8 +1353,8 @@ class GitWorker:
 
     def clone(self):
         try:
-            if settings.DEBUG:
-                logger.debug('Копируем репозиторий: {} ->{} '.format(self.GITPRO, self.PATH_OF_GIT_REPO))
+            # if settings.DEBUG:
+            #     logger.debug('Копируем репозиторий: {} ->{} '.format(self.GITPRO, self.PATH_OF_GIT_REPO))
             UpdateCallBackStatus(self.request, self.taskid, 'git_upload_status', "Клонируем удаленный репозиторий")
             self.repo = self.repo.clone_from(self.GITPRO, self.PATH_OF_GIT_REPO)
         except Exception as e:
@@ -1366,7 +1365,7 @@ class GitWorker:
                 #self.request.session['git_upload_status'].append({'error': "[Ошибка] {}".format(e)})
                 UpdateCallBackStatus(self.request, self.taskid, 'git_upload_status', "Ошибка при клонировании резозитория", 0)
             if settings.DEBUG:
-                logger.debug('Ошибка при копировании: {}'.format(e))
+                logger.debug('Ошибка при копировании')
             return 0
 
         if len(self.repo.index.entries) == 0:
@@ -1400,7 +1399,7 @@ class GitWorker:
             #self.request.session['git_upload_status'].append({'error': "Возникла ошибка при копировании md файла в папку проекта"})
             UpdateCallBackStatus(self.request, self.taskid, 'git_upload_status', "Возникла ошибка при копировании md файла в папку проекта", 0)
             if settings.DEBUG:
-                logger.debug("Возникла ошибка при копировании md файла в папку проекта: {}".format(e))
+                logger.error("Возникла ошибка при копировании md файла в папку проекта")
             return 0
         #finally:
         #if 'linux' in sys.platform:
@@ -1424,7 +1423,7 @@ class GitWorker:
                 UpdateCallBackStatus(self.request, self.taskid, 'git_upload_status',
                                      "Ошибка при локальном коммите", 0)
                 if settings.DEBUG:
-                    logger.debug("Ошибка при коммите: {}".format(e))
+                    logger.error("Ошибка при локальном коммите: {}".format(e))
                 return False
         return True
 
@@ -1444,8 +1443,9 @@ class GitWorker:
             if e.status == 128:
                 #self.request.session['git_upload_status'].append({'error': "Ошибка аутентификации для данного репозитория"})
                 UpdateCallBackStatus(self.request, self.taskid, 'git_upload_status', "Ошибка аутентификации для данного репозитория", 0)
+                send_to_mattermost(f'[ACL PORTAL] Не удалось отправить md файл в git: У пользователя {self.USERNAME.replace("%40","@")} нет доступа.')
                 if settings.DEBUG:
-                    logger.debug("Ошибка аутентификации для данного репозитория")
+                    logger.debug(f'Ошибка аутентификации для данного репозитория. Пользователь: {self.USERNAME.replace("%40","@")}')
             elif "src refspec master" in e.stderr:
                 if refspec == 'master:master':
                     UpdateCallBackStatus(self.request, self.taskid, 'git_upload_status', "Ошибка при отправке в ветку master, пробуем в последний коммит: {}".format(self.repo.active_branch))
@@ -1457,8 +1457,8 @@ class GitWorker:
             else:
                 #self.request.session['git_upload_status'].append({'error': "Ошибка при отправки файла в проект: {}".format(e)})
                 UpdateCallBackStatus(self.request, self.taskid, 'git_upload_status', "Ошибка при отправке коммита на сервер", 0)
-                if settings.DEBUG:
-                    logger.debug("Ошибка при отправки файла в проект: {}".format(e))
+                # if settings.DEBUG:
+                #     logger.debug("Ошибка при отправке файла в проект: {}".format(e))
             return False
 
         finally:


