==== File: accesslist/views.py ====
@@ -38,6 +38,11 @@ from inspect import stack
 from time import sleep
 from django.db import transaction
 import threading
+
+from rest_framework.response import Response
+from rest_framework.views import APIView
+
+
 tasklist = ['ACT_MAKE_DOCX', 'ACT_MAKE_GIT', 'ACT_OMNI']
 jobs = ['docx', 'git', 'omni']
 #геморрой с выкаткой
@@ -1397,3 +1402,45 @@ def makeAndDownloadMdAndDocx(request, acl_id):
     except Exception as e:
         logger.error(f'[MAKE FILE] Exctption: Не удалось сформировать файл. file_type:{file_type}; file_path:{file_path}; Ошибка:{e};')
         AclOver()
+
+
+class APIACLInfoView(APIView):
+    def check_ip_for_pam(self, ip_source, ip_destination, port):
+        pass
+    def post(self, request):
+        result = False
+        ip_source = request.data.get('ip_source')
+        ip_destination = request.data.get('ip_destination')
+        port = request.data.get('port').replace(" ", "")
+
+        if ip_source and ip_destination and port:
+            queryset = ACL.objects.values_list('id', 'acltext', 'taskid').exclude(taskid='')
+            for acl in queryset:
+                acl_id = acl[0]
+                acltext_dict = json.loads(acl[1])
+                if 'acl_traffic.html' in acltext_dict:
+                    for item in acltext_dict['acl_traffic.html']:
+                        if ip_source in item[1] and ip_destination in item[3]:
+                            row_port = item[4].split('/')[1].replace(" ", "")
+                            if re.match(r'^\d+$', row_port):
+                                if row_port == port:
+                                    result = True
+                            elif re.match(r'^\d+-\d+$', row_port):
+                                start_num, end_num = row_port.split('-')
+                                if int(start_num) <= int(port) <= int(end_num):
+                                    result = True
+                            else:
+                                row_port_list = row_port.split(',')
+                                for row_port_el in row_port_list:
+                                    if re.match(r'^\d+$', row_port_el):
+                                        if row_port_el == port:
+                                            result = True
+                                            break
+                                    elif re.match(r'^\d+-\d+$', row_port_el):
+                                        start_num, end_num = row_port_el.split('-')
+                                        if int(start_num) <= int(port) <= int(end_num):
+                                            result = True
+                                            break
+                    if result:
+                        break
+        return Response(json.dumps({"ip_source": ip_source, 'ip_destination': ip_destination, 'port': port, 'result': result}))


