==== File: accesslist/templates/acl_traffic.html ====
@@ -42,7 +42,7 @@
                                 {% for widget in widgets %}
                                     <td>
                                         {% if "input__ip" in widget or widget == "input__host_port"%}
-                                            <input type="text" class="form-control" value="{{item|get_index:forloop.counter0}}" name="{{widget}}_{% random_int %}" {% if widget == "input__host_port" %} pattern="^[a-zA-Z]+/+(?:\d+|\d+-\d+)$" placeholder="UDP/100-200" title="UDP/100-200" {% else %} pattern="^((\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])(/\d{1,2})?$" title="1.1.1.1" {% endif %} autofocus required>
+                                            <input type="text" class="form-control" value="{{item|get_index:forloop.counter0}}" name="{{widget}}_{% random_int %}" {% if widget == "input__host_port" %} pattern="^[a-zA-Z]+/+(?:\d+|\d+-\d+)(?:,\s*(?:\d+|\d+-\d+))*$" placeholder="UDP/100-200" title="UDP/100-200" {% else %} pattern="^((\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])(/\d{1,2})?$" title="1.1.1.1" {% endif %} autofocus required>
                                         {% else %}
                                             <textarea type="text" class="form-control" rows="1" cols="19" name="{{widget}}_{% random_int %}" {% if widget == "input__application_port" %} title="grpc, kafka, sqlServer" maxlength="50" {% endif %} autofocus required>{{item|get_index:forloop.counter0}}</textarea>
                                         {% endif %}
@@ -60,7 +60,7 @@
                      {% for widget in widgets %}
                                  <td>
                                      {% if widget == "input__ip_source" or widget == "input__ip__external" or widget == "input__host_port" %}
-                                            <input type="text" class="form-control" value="{{item|get_index:forloop.counter0}}" name="{{widget}}_{% random_int %}" {% if widget == "input__ip_source" or widget == "input__ip__external" %} pattern="^((\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])(/\d{1,2})?$" {% endif %} {% if widget == "input__host_port" %} pattern="^[a-zA-Z]+/+(?:\d+|\d+-\d+)$" placeholder="UDP/100-200" title="UDP/100-200"{% endif %} autofocus required>
+                                            <input type="text" class="form-control" value="{{item|get_index:forloop.counter0}}" name="{{widget}}_{% random_int %}" {% if widget == "input__ip_source" or widget == "input__ip__external" %} pattern="^((\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])(/\d{1,2})?$" {% endif %} {% if widget == "input__host_port" %} pattern="^[a-zA-Z]+/+(?:\d+|\d+-\d+)(?:,\s*(?:\d+|\d+-\d+))*$" placeholder="UDP/100-200" title="UDP/100-200"{% endif %} autofocus required>
                                      {% else %}
                                             <textarea type="text" class="form-control" rows="1" cols="19" name="{{widget}}_{% random_int %}" {% if widget == "input__application_port" %}title="grpc, kafka, sqlServer" maxlength="50" {% endif %} autofocus required>{{item|get_index:forloop.counter0}}</textarea>
                                      {% endif %}


==== File: accesslist/tests.py ====
@@ -1,3 +1,33 @@
+from django.contrib.auth.models import User
 from django.test import TestCase
+from django.urls import reverse
+from ownerlist.utils import send_to_mattermost
 
-# Create your tests here.
+
+class TestAccesslist(TestCase):
+    def setUp(self):
+        self.username = 'testAccessList'
+        self.password= 'Qwrt23y1@'
+        self.user = User.objects.create_user(username=self.username, password=self.password)
+
+        request = self.client.get('/acl/welcome/')
+        request.session = self.client.session
+        self.client.login(request=request, username=self.username, password=self.password)
+
+    def test_welcome_page(self):
+        response = self.client.get(reverse('acldemo_urls'))
+        if response.status_code != 200:
+            send_to_mattermost('Тест не пройден. Ошибка на странице "Приветствие"')
+        self.assertEqual(response.status_code, 200)
+
+    def test_history_page(self):
+        response = self.client.get(reverse('aclhistory_urls'))
+        if response.status_code != 200:
+            send_to_mattermost('Тест не пройден. Ошибка на странице "История обращений"')
+        self.assertEqual(response.status_code, 200)
+
+    def test_create_page(self):
+        response = self.client.post(reverse('aclcreate_urls'))
+        if response.status_code != 200:
+            send_to_mattermost('Тест не пройден. Ошибка на странице "Создание ACL"')
+        self.assertEqual(response.status_code, 200)


==== File: accesslist/views.py ====
@@ -1253,7 +1253,7 @@ def sync_gitlab_projects(request=None):
         for gitlab_project in gitlab_project_list:
             project_obj, created = ACLGitlabStore.objects.get_or_create(gitlab_url=gitlab_project['http_url_to_repo'])
             if created:
-                project_obj.project = f'{gitlab_project["subgroup_name"]}/{gitlab_project["project_name"]}'
+                project_obj.project = f'{gitlab_project["block_name"]}/{gitlab_project["subgroup_name"]}/{gitlab_project["project_name"]}'
                 project_obj.gitlab_url = gitlab_project['http_url_to_repo']
                 project_obj.save()
 


==== File: manage.py ====
@@ -7,6 +7,8 @@ import sys
 
 def main():
     """Run administrative tasks."""
+    if len(sys.argv) > 1 and sys.argv[1] == "runserver":
+        os.system("python manage.py test accesslist")
     os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'acladmin.settings')
     try:
         from django.core.management import execute_from_command_line


==== File: ownerlist/utils.py ====
@@ -2109,7 +2109,8 @@ def check_taskId_by_uuid(uuid, proxy=None):
     return str(result)
 
 def sync_acl_portal_projects_list(group_name : str = "ACL"):
-    subgroups_list = []
+    block_list = []
+    subgroup_list = []
     project_list = []
     session = requests.Session()
     session.headers.update({'PRIVATE-TOKEN': settings.GIT_ACCESS_TOKEN})
@@ -2117,17 +2118,27 @@ def sync_acl_portal_projects_list(group_name : str = "ACL"):
         url_get_subgroups = f'https://gitlab.alfastrah.ru/api/v4/groups/{group_name}/subgroups'
         response = session.get(url_get_subgroups)
         if response.status_code == 200:
-            for subgroup in response.json():
-                subgroups_list.append({"id":subgroup["id"], "name":subgroup["name"]})
+            for block in response.json():
+                block_list.append({"id":block["id"], "name":block["name"]})
+    except Exception as e:
+        logger.error(f"Ошибка при получении блоков: {e}")
+
+    try:
+        for block in block_list:
+            url_get_projects = f"https://gitlab.alfastrah.ru/api/v4/groups/{block['id']}/subgroups"
+            response = session.get(url_get_projects)
+            if response.status_code == 200:
+                for subgroup in response.json():
+                    subgroup_list.append({"block_name":block['name'], "id":subgroup["id"], "name":subgroup["name"]})
     except Exception as e:
         logger.error(f"Ошибка при получении подгрупп: {e}")
     try:
-        for subgroup in subgroups_list:
+        for subgroup in subgroup_list:
             url_get_projects = f"https://gitlab.alfastrah.ru/api/v4/groups/{subgroup['id']}/projects"
             response = session.get(url_get_projects)
             if response.status_code == 200:
                 for project in response.json():
-                    project_list.append({'subgroup_name':subgroup['name'], 'project_name': project['name'], 'http_url_to_repo': project['http_url_to_repo']})
+                    project_list.append({'block_name':subgroup['block_name'], 'subgroup_name':subgroup['name'], 'project_name': project['name'], 'http_url_to_repo': project['http_url_to_repo']})
     except Exception as e:
         logger.error(f"Ошибка при получении проектов: {e}")
     finally:


