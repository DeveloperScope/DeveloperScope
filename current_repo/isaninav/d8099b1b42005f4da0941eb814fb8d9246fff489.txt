==== File: accesslist/templates/acl_history.html ====
@@ -48,6 +48,9 @@
  {% if acllists %}
     <div class="p-1 mt-1 w-80">
         <div class="p-1 history-activity" style="display: none">
+            {%if user.is_superuser%}
+                <button class="btn btn-danger btn-acl-pusher m-1">Проверить/Переотправить ACL</button>
+            {% endif %}
             {% if user.is_staff %}
             <button class="btn btn-secondary btn-stage m-1" disabled>Изменить статус</button>
             {% endif %}
@@ -329,4 +332,47 @@
     }
 
 </script>
+
+<script>
+    $(".btn-acl-pusher").click(function(){
+        var csrfToken = $('input[name="csrfmiddlewaretoken"]').val();
+        var acl_list = [];
+
+        if (window.location.href.indexOf('history') == -1) {
+
+            let acl_uuid = extractUuid(window.location.href);
+
+                if (acl_uuid != '' && acl_uuid != null)
+                {
+                    acl_list.push(acl_uuid);
+                }
+        }
+        else
+        {
+            $('.table-history input:checkbox:checked').each(function () {
+                let acl_uuid = $(this).attr('data');
+                if (acl_uuid) {
+                    acl_list.push(acl_uuid);
+                }
+            });
+        }
+        ShowNotify(idx=2, text="Начинаю проверку "+acl_list.length+" ACL");
+        $.ajax({
+            url: '/acl/history/acl_pusher/',
+            type: 'POST',
+            headers: {'X-CSRFToken': "{{csrf_token}}"},
+            data: {
+                "acl_list":acl_list
+            },
+            success: function(response) {
+                ShowNotify(idx=2, text="Проверка "+acl_list.length+" ACL выполнена.");
+                refresh();
+            },
+            error: function(xhr, status, error){
+                ShowNotify(idx=0, text='Произошла ошибка при проверке элементов');
+                refresh();
+            }
+        });
+    });
+</script>
 {% endblock %}


==== File: accesslist/views.py ====
@@ -780,64 +780,71 @@ def upload_acl_from_git(request):
             return HttpResponse(json.dumps(result), content_type="application/text")
         return HttpResponse(json.dumps("Error method type"), content_type="application/text")
 
-def check_taskid_and_status(request):
+def check_taskid_and_status(request, *args, **kwargs):
     '''Проверяет acl в omnitracker, если нет - переотправляет'''
-    user = request.user
-    if user.is_authenticated and user.is_superuser:
-
-        aclObject_list = ACL.objects.filter(status="APRV")
-        for aclObject in aclObject_list:
-            try:
-                acl_id = aclObject.id
-                acl_checking_result = acl_sending_retry_checking(aclObject)
-                if acl_checking_result is None:
-                    try:
-                        if aclObject.taskid != '':
-                            logger.info(f'[Перехвачен дубль обращения!] Номер SD:{aclObject.taskid}')
-                            # send_to_mattermost(f"[Перехвачен Дубль обращения] ACL уже назначен Номер SD:{aclObject.taskid}; Ссылка на ACL :https://acl.vesta.ru/acl/info/{str(aclObject.id)}")
+    if request.method == 'POST':
+        user = request.user
+        success_checks_count = 0
+        success_send_omni_count = 0
+        if user.is_authenticated and user.is_superuser:
+            checked_acl_list = request.POST.getlist('acl_list[]')
+            aclObject_list = ACL.objects.filter(id__in=checked_acl_list)
+            for aclObject in aclObject_list:
+                try:
+                    acl_id = aclObject.id
+                    acl_checking_result = acl_sending_retry_checking(aclObject)
+                    success_checks_count += 1
+                    if acl_checking_result is None:
                         try:
-                            doc_result = make_doc(request, json.loads(aclObject.acltext), acl_id)
-                        except Exception as e:
-                            logger.error(f'Ошибка при создании docx: {e}')
+                            if aclObject.taskid != '':
+                                send_to_mattermost(f"[acl_pusher] [Перехвачен Дубль обращения] ACL уже назначен Номер SD:{aclObject.taskid}; Ссылка на ACL :https://acl.vesta.ru/acl/info/{str(aclObject.id)}")
+                                continue
+                            try:
+                                doc_result = make_doc(request, json.loads(aclObject.acltext), acl_id)
+                            except Exception as e:
+                                logger.error(f'Ошибка при создании docx: {e}')
+
+                            try:
+                                if settings.OMNITRACKER_URL:
+                                    try:
+                                        docx_url = f"{request.get_host()}/{doc_result[1:]}"
+                                        logger.error('URL ОТПРАВКИ В OMNI' + str(docx_url))
+
+                                        if '://' not in docx_url:
+                                            docx_url = 'https://' + docx_url
+
+                                    except Exception as e:
+                                        docx_url = ''
+                                        logger.error(f'Ошибка при создании ссылки на docx: {e}')
+                                    result_id = send_onmitracker(sender=aclObject.owner.email,
+                                                                 title=f'SH0458 Запрос на предоставление доступа согласован : {str(aclObject.approve.first().get_full_name())}',
+                                                                 text=f'Прошу предоставить сетевой доступ, согласно ACL. Согласование владельца ресурса во вложении. Ссылка на ACL :https://acl.vesta.ru/acl/info/{str(acl_id)}',
+                                                                 attach=docx_url,
+                                                                 fake=False,
+                                                                 request=request,
+                                                                 uid=acl_id
+                                                                 )
+                                result_id = int(result_id) or 0
+                                if result_id == 0:
+                                    raise Exception('Мы не смогли создать обращение через OmniTracker')
+                                else:
+                                    if aclObject:
+                                        aclObject.taskid = str(result_id)
+                                        aclObject.save(update_fields=['taskid'])
+                                        success_send_omni_count += 1
+                                        send_to_mattermost(f'[acl_pusher][owner={aclObject.owner}, Ссылка на ACL: https://acl.vesta.ru/acl/info/{str(aclObject.id)}] Получен номер SD("{result_id}"). Добавление и проверка записи на портале={aclObject.taskid}')
+                                    if 'ACT_OMNI' in request.session: del request.session['ACT_OMNI']
+                            except Exception as e:
+                                logger.error(f'Произошла ошибка при формировании заявки: {e}')
 
-                        try:
-                            if settings.OMNITRACKER_URL:
-                                try:
-                                    docx_url = f"{request.get_host()}/{doc_result[1:]}"
-                                    logger.error('URL ОТПРАВКИ В OMNI' + str(docx_url))
-
-                                    if '://' not in docx_url:
-                                        docx_url = 'https://' + docx_url
-
-                                except Exception as e:
-                                    docx_url = ''
-                                    logger.error(f'Ошибка при создании ссылки на docx: {e}')
-                                result_id = send_onmitracker(sender=aclObject.owner.email,
-                                                             title=f'SH0458 Запрос на предоставление доступа согласован : {str(aclObject.approve.first().get_full_name())}',
-                                                             text=f'Прошу предоставить сетевой доступ, согласно ACL. Согласование владельца ресурса во вложении. Ссылка на ACL :https://acl.vesta.ru/acl/info/{str(acl_id)}',
-                                                             attach=docx_url,
-                                                             fake=False,
-                                                             request=request,
-                                                             uid=acl_id
-                                                             )
-                            result_id = int(result_id) or 0
-                            if result_id == 0:
-                                raise Exception('Мы не смогли создать обращение через OmniTracker')
-                            else:
-                                if aclObject:
-                                    aclObject.taskid = str(result_id)
-                                    aclObject.save(update_fields=['taskid'])
-                                    send_to_mattermost(f'[acl_pusher][owner={aclObject.owner}, Ссылка на ACL: https://acl.vesta.ru/acl/info/{str(aclObject.id)}] Получен номер SD("{result_id}"). Добавление и проверка записи на портале={aclObject.taskid}')
-                                if 'ACT_OMNI' in request.session: del request.session['ACT_OMNI']
                         except Exception as e:
-                            logger.error(f'Произошла ошибка при формировании заявки: {e}')
-
-                    except Exception as e:
-                        logger.error(f'Ошибка при отправки обращения в SD: {e}')
-            except Exception as e:
-                logger.error(f'Ошибка при работе с acl({acl_id}): {e} ')
-                continue
-    return HttpResponseRedirect(reverse('aclhistory_urls'))
+                            logger.error(f'Ошибка при отправки обращения в SD: {e}')
+                except Exception as e:
+                    logger.error(f'Ошибка при работе с acl({acl_id}): {e} ')
+                    continue
+        send_to_mattermost(f"[acl_pusher] Результат работы Доталкивателя ACL: ( ACL Проверено: {success_checks_count}; ACL переотправлено: {success_send_omni_count})")
+        return HttpResponseRedirect(reverse('aclhistory_urls'))
+    return HttpResponse(json.dumps("Error method type"), content_type="application/text")
 
 #@csrf_exempt
 def UploadTemplate(request):


==== File: templates/base.html ====
@@ -197,14 +197,7 @@
                          <i class="fas fa-user-cog pr-1"></i> Администрирование
                       </span>
                     </a>
-                  </nav>
-                    <nav class="nav-group">
-                    <a href="{% url 'acl_pusher' %}" class="nav-link">
-                      <span class="nav-text">
-                         <i class="fas fa-user-cog pr-1"></i> Проверить/Переотправить ACL
-                      </span>
-                    </a>
-                  </nav>
+                </nav>
                 {% endif %}
 
                </div>


